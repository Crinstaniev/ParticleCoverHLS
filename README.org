* ParticleCoverHLS

This project is a HLS implementation of the ParticleCover algorithm from [[https://github.com/mbahng/ParticleCover/][ParticleCover]]

** Coding Convention

=class= converted to =struct= to accomondate HLS.
Each struct has its own header and source code file.

TODO: Add more details

** High-level Logic


Definitions:
- Cover(C): A collection of patches.
- Patch(P): A group of 5 superpoints, each from a different layer.
- Superpoint(S): A set of 16 consecutive points within a single layer.

Classes:
- Superpoint
  - Attributes: List of 16 points or interval [min, max]
  - Method: contains(p): Returns true if p is within the superpoint.

- Patch
  - Attributes: Tuple of 5 superpoints (S1, S2, S3, S4, S5)
  - Method: contains(line): Returns true if the line is contained within the patch.

- Cover
  - Attributes: Environment (env), DataSet (data), List of Patches (patches), SuperPoints (superPoints)
  - Method: solve(): Constructs the cover by adding patches to cover generated lines.

Pseudo Code:

1. Initialize Cover with Environment and DataSet
   cover = Cover(env, data)

2. For each layer in env, construct superpoints and add to cover.superPoints
   For i = 1 to env.layers
     - Initialize list of superpoints for layer i
     - Construct superpoints by grouping 16 consecutive points
     - Add superpoints to cover.superPoints

3. Generate lines using LineGenerator for the environment
   lines = LineGenerator.generate_lines(env)

4. For each line in lines
   - Initialize patch_ingredients as empty
   - For each point in line, find the containing superpoint in the corresponding layer
   - Add the found superpoints to patch_ingredients

5. Construct a patch from patch_ingredients and check for duplicates
   - If patch is not a duplicate, add to cover.patches and increment cover.n_patches

6. Repeat step 4 for all lines

7. Cover is now constructed with minimal patches covering all lines

** Known Problems

- Initialization of =cover= failed. I guess it is due to the size of the struct.

Data Hierarchy:
+ cover
  + dataset
    + env
    + point[NUM_LAYERS][MAX_NUM_POINTS]
  + env
  + patch[MAX_NUM_PATCHES]
    + superpoints[NUM_LAYERS]
      + points[MAX_NUM_POINTS]
  + patch[MAX_NUM_PATCHES]
    + superpoints[NUM_LAYERS] 
      + points[MAX_NUM_POINTS]
  + superpoint[NUM_LAYERS]
    + points[MAX_NUM_POINTS]

NUM_LAYERS = 5
MAX_NUM_POINTS = 1024
MAX_NUM_PATCHES = 32