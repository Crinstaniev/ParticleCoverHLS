// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="system_top_system_top,hls_ip_2020_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xcvu11p-flga2577-1-e,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=6.492250,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=243,HLS_SYN_LUT=275,HLS_VERSION=2020_2}" *)

module system_top (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        point_arr_in_address0,
        point_arr_in_ce0,
        point_arr_in_q0,
        point_arr_in_address1,
        point_arr_in_ce1,
        point_arr_in_q1,
        point_arr_out_address0,
        point_arr_out_ce0,
        point_arr_out_we0,
        point_arr_out_d0,
        point_arr_out_address1,
        point_arr_out_ce1,
        point_arr_out_we1,
        point_arr_out_d1
);

parameter    ap_ST_fsm_state1 = 5'd1;
parameter    ap_ST_fsm_state2 = 5'd2;
parameter    ap_ST_fsm_state3 = 5'd4;
parameter    ap_ST_fsm_state4 = 5'd8;
parameter    ap_ST_fsm_state5 = 5'd16;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [10:0] point_arr_in_address0;
output   point_arr_in_ce0;
input  [191:0] point_arr_in_q0;
output  [10:0] point_arr_in_address1;
output   point_arr_in_ce1;
input  [191:0] point_arr_in_q1;
output  [10:0] point_arr_out_address0;
output   point_arr_out_ce0;
output  [23:0] point_arr_out_we0;
output  [191:0] point_arr_out_d0;
output  [10:0] point_arr_out_address1;
output   point_arr_out_ce1;
output  [23:0] point_arr_out_we1;
output  [191:0] point_arr_out_d1;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[10:0] point_arr_in_address0;
reg point_arr_in_ce0;
reg point_arr_in_ce1;
reg point_arr_out_ce0;
reg[23:0] point_arr_out_we0;
reg point_arr_out_ce1;
reg[23:0] point_arr_out_we1;

(* fsm_encoding = "none" *) reg   [4:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [31:0] empty_fu_136_p1;
reg   [31:0] empty_reg_268;
wire    ap_CS_fsm_state2;
wire   [31:0] add_ln12_fu_140_p2;
reg   [31:0] add_ln12_reg_273;
wire    ap_CS_fsm_state3;
reg   [59:0] tmp_1_reg_281;
wire   [0:0] icmp_ln12_fu_146_p2;
reg   [10:0] trunc_ln14_1_reg_286;
wire   [63:0] zext_ln14_5_fu_221_p1;
reg   [63:0] zext_ln14_5_reg_291;
wire    ap_CS_fsm_state4;
wire   [63:0] zext_ln14_3_fu_230_p1;
reg   [63:0] zext_ln14_3_reg_301;
reg   [31:0] i_reg_125;
wire    ap_CS_fsm_state5;
wire   [36:0] shl_ln_fu_151_p3;
wire   [34:0] shl_ln14_1_fu_163_p3;
wire   [37:0] zext_ln14_1_fu_159_p1;
wire   [37:0] zext_ln14_2_fu_171_p1;
wire   [37:0] sub_ln14_fu_175_p2;
wire   [37:0] add_ln14_fu_181_p2;
wire  signed [63:0] sext_ln14_fu_187_p1;
wire   [63:0] mul_ln14_fu_195_p0;
wire   [65:0] mul_ln14_fu_195_p1;
wire   [128:0] mul_ln14_fu_195_p2;
wire   [10:0] add_ln14_1_fu_225_p2;
wire   [127:0] tmp_fu_235_p4;
wire   [63:0] trunc_ln14_fu_254_p1;
reg   [4:0] ap_NS_fsm;
wire   [128:0] mul_ln14_fu_195_p00;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 5'd1;
end

system_top_mul_64ns_66ns_129_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 66 ),
    .dout_WIDTH( 129 ))
mul_64ns_66ns_129_1_1_U1(
    .din0(mul_ln14_fu_195_p0),
    .din1(mul_ln14_fu_195_p1),
    .dout(mul_ln14_fu_195_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_reg_125 <= 32'd0;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        i_reg_125 <= add_ln12_reg_273;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        add_ln12_reg_273 <= add_ln12_fu_140_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        empty_reg_268 <= empty_fu_136_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln12_fu_146_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        tmp_1_reg_281 <= {{mul_ln14_fu_195_p2[128:69]}};
        trunc_ln14_1_reg_286 <= {{mul_ln14_fu_195_p2[79:69]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        zext_ln14_3_reg_301[10 : 0] <= zext_ln14_3_fu_230_p1[10 : 0];
        zext_ln14_5_reg_291[59 : 0] <= zext_ln14_5_fu_221_p1[59 : 0];
    end
end

always @ (*) begin
    if (((icmp_ln12_fu_146_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln12_fu_146_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        point_arr_in_address0 = zext_ln14_3_fu_230_p1;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        point_arr_in_address0 = 64'd0;
    end else begin
        point_arr_in_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1)))) begin
        point_arr_in_ce0 = 1'b1;
    end else begin
        point_arr_in_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        point_arr_in_ce1 = 1'b1;
    end else begin
        point_arr_in_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        point_arr_out_ce0 = 1'b1;
    end else begin
        point_arr_out_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        point_arr_out_ce1 = 1'b1;
    end else begin
        point_arr_out_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        point_arr_out_we0 = 24'd255;
    end else begin
        point_arr_out_we0 = 24'd0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        point_arr_out_we1 = 24'd16776960;
    end else begin
        point_arr_out_we1 = 24'd0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            if (((icmp_ln12_fu_146_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln12_fu_140_p2 = (i_reg_125 + 32'd1);

assign add_ln14_1_fu_225_p2 = (trunc_ln14_1_reg_286 + 11'd1);

assign add_ln14_fu_181_p2 = (sub_ln14_fu_175_p2 + 38'd8);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign empty_fu_136_p1 = point_arr_in_q0[31:0];

assign icmp_ln12_fu_146_p2 = ((i_reg_125 == empty_reg_268) ? 1'b1 : 1'b0);

assign mul_ln14_fu_195_p0 = mul_ln14_fu_195_p00;

assign mul_ln14_fu_195_p00 = $unsigned(sext_ln14_fu_187_p1);

assign mul_ln14_fu_195_p1 = 129'd24595658764946068822;

assign point_arr_in_address1 = zext_ln14_5_fu_221_p1;

assign point_arr_out_address0 = zext_ln14_3_reg_301;

assign point_arr_out_address1 = zext_ln14_5_reg_291;

assign point_arr_out_d0 = trunc_ln14_fu_254_p1;

assign point_arr_out_d1 = {{tmp_fu_235_p4}, {64'd0}};

assign sext_ln14_fu_187_p1 = $signed(add_ln14_fu_181_p2);

assign shl_ln14_1_fu_163_p3 = {{i_reg_125}, {3'd0}};

assign shl_ln_fu_151_p3 = {{i_reg_125}, {5'd0}};

assign sub_ln14_fu_175_p2 = (zext_ln14_1_fu_159_p1 - zext_ln14_2_fu_171_p1);

assign tmp_fu_235_p4 = {{point_arr_in_q1[191:64]}};

assign trunc_ln14_fu_254_p1 = point_arr_in_q0[63:0];

assign zext_ln14_1_fu_159_p1 = shl_ln_fu_151_p3;

assign zext_ln14_2_fu_171_p1 = shl_ln14_1_fu_163_p3;

assign zext_ln14_3_fu_230_p1 = add_ln14_1_fu_225_p2;

assign zext_ln14_5_fu_221_p1 = tmp_1_reg_281;

always @ (posedge ap_clk) begin
    zext_ln14_5_reg_291[63:60] <= 4'b0000;
    zext_ln14_3_reg_301[63:11] <= 53'b00000000000000000000000000000000000000000000000000000;
end

endmodule //system_top
