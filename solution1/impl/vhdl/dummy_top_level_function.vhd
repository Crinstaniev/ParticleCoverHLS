-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Version: 2020.2
-- Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity system_top is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    point_arr_in_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    point_arr_in_ce0 : OUT STD_LOGIC;
    point_arr_in_q0 : IN STD_LOGIC_VECTOR (191 downto 0);
    point_arr_in_address1 : OUT STD_LOGIC_VECTOR (10 downto 0);
    point_arr_in_ce1 : OUT STD_LOGIC;
    point_arr_in_q1 : IN STD_LOGIC_VECTOR (191 downto 0);
    point_arr_out_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    point_arr_out_ce0 : OUT STD_LOGIC;
    point_arr_out_we0 : OUT STD_LOGIC_VECTOR (23 downto 0);
    point_arr_out_d0 : OUT STD_LOGIC_VECTOR (191 downto 0);
    point_arr_out_address1 : OUT STD_LOGIC_VECTOR (10 downto 0);
    point_arr_out_ce1 : OUT STD_LOGIC;
    point_arr_out_we1 : OUT STD_LOGIC_VECTOR (23 downto 0);
    point_arr_out_d1 : OUT STD_LOGIC_VECTOR (191 downto 0) );
end;


architecture behav of system_top is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "system_top_system_top,hls_ip_2020_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xcvu11p-flga2577-1-e,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=6.492250,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=243,HLS_SYN_LUT=275,HLS_VERSION=2020_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (4 downto 0) := "01000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv24_0 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000000";
    constant ap_const_lv24_FFFF00 : STD_LOGIC_VECTOR (23 downto 0) := "111111111111111100000000";
    constant ap_const_lv24_FF : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000011111111";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv38_8 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000000000000000000000001000";
    constant ap_const_lv129_lc_1 : STD_LOGIC_VECTOR (128 downto 0) := "000000000000000000000000000000000000000000000000000000000000000010101010101010101010101010101010101010101010101010101010101010110";
    constant ap_const_lv32_45 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000101";
    constant ap_const_lv32_80 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000000";
    constant ap_const_lv32_4F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001111";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv32_BF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010111111";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal empty_fu_136_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_reg_268 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal add_ln12_fu_140_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln12_reg_273 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal tmp_1_reg_281 : STD_LOGIC_VECTOR (59 downto 0);
    signal icmp_ln12_fu_146_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln14_1_reg_286 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln14_5_fu_221_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln14_5_reg_291 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal zext_ln14_3_fu_230_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln14_3_reg_301 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_reg_125 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal shl_ln_fu_151_p3 : STD_LOGIC_VECTOR (36 downto 0);
    signal shl_ln14_1_fu_163_p3 : STD_LOGIC_VECTOR (34 downto 0);
    signal zext_ln14_1_fu_159_p1 : STD_LOGIC_VECTOR (37 downto 0);
    signal zext_ln14_2_fu_171_p1 : STD_LOGIC_VECTOR (37 downto 0);
    signal sub_ln14_fu_175_p2 : STD_LOGIC_VECTOR (37 downto 0);
    signal add_ln14_fu_181_p2 : STD_LOGIC_VECTOR (37 downto 0);
    signal sext_ln14_fu_187_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_ln14_fu_195_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_ln14_fu_195_p1 : STD_LOGIC_VECTOR (65 downto 0);
    signal mul_ln14_fu_195_p2 : STD_LOGIC_VECTOR (128 downto 0);
    signal add_ln14_1_fu_225_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_fu_235_p4 : STD_LOGIC_VECTOR (127 downto 0);
    signal trunc_ln14_fu_254_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (4 downto 0);
    signal mul_ln14_fu_195_p00 : STD_LOGIC_VECTOR (128 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component system_top_mul_64ns_66ns_129_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (65 downto 0);
        dout : OUT STD_LOGIC_VECTOR (128 downto 0) );
    end component;



begin
    mul_64ns_66ns_129_1_1_U1 : component system_top_mul_64ns_66ns_129_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 64,
        din1_WIDTH => 66,
        dout_WIDTH => 129)
    port map (
        din0 => mul_ln14_fu_195_p0,
        din1 => mul_ln14_fu_195_p1,
        dout => mul_ln14_fu_195_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    i_reg_125_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                i_reg_125 <= ap_const_lv32_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                i_reg_125 <= add_ln12_reg_273;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                add_ln12_reg_273 <= add_ln12_fu_140_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                empty_reg_268 <= empty_fu_136_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln12_fu_146_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                tmp_1_reg_281 <= mul_ln14_fu_195_p2(128 downto 69);
                trunc_ln14_1_reg_286 <= mul_ln14_fu_195_p2(79 downto 69);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                    zext_ln14_3_reg_301(10 downto 0) <= zext_ln14_3_fu_230_p1(10 downto 0);
                    zext_ln14_5_reg_291(59 downto 0) <= zext_ln14_5_fu_221_p1(59 downto 0);
            end if;
        end if;
    end process;
    zext_ln14_5_reg_291(63 downto 60) <= "0000";
    zext_ln14_3_reg_301(63 downto 11) <= "00000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state3, icmp_ln12_fu_146_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                if (((icmp_ln12_fu_146_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when others =>  
                ap_NS_fsm <= "XXXXX";
        end case;
    end process;
    add_ln12_fu_140_p2 <= std_logic_vector(unsigned(i_reg_125) + unsigned(ap_const_lv32_1));
    add_ln14_1_fu_225_p2 <= std_logic_vector(unsigned(trunc_ln14_1_reg_286) + unsigned(ap_const_lv11_1));
    add_ln14_fu_181_p2 <= std_logic_vector(unsigned(sub_ln14_fu_175_p2) + unsigned(ap_const_lv38_8));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);

    ap_done_assign_proc : process(ap_CS_fsm_state3, icmp_ln12_fu_146_p2)
    begin
        if (((icmp_ln12_fu_146_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state3, icmp_ln12_fu_146_p2)
    begin
        if (((icmp_ln12_fu_146_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    empty_fu_136_p1 <= point_arr_in_q0(32 - 1 downto 0);
    icmp_ln12_fu_146_p2 <= "1" when (i_reg_125 = empty_reg_268) else "0";
    mul_ln14_fu_195_p0 <= mul_ln14_fu_195_p00(64 - 1 downto 0);
    mul_ln14_fu_195_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln14_fu_187_p1),129));
    mul_ln14_fu_195_p1 <= ap_const_lv129_lc_1(66 - 1 downto 0);

    point_arr_in_address0_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state4, zext_ln14_3_fu_230_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            point_arr_in_address0 <= zext_ln14_3_fu_230_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            point_arr_in_address0 <= ap_const_lv64_0(11 - 1 downto 0);
        else 
            point_arr_in_address0 <= "XXXXXXXXXXX";
        end if; 
    end process;

    point_arr_in_address1 <= zext_ln14_5_fu_221_p1(11 - 1 downto 0);

    point_arr_in_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1)))) then 
            point_arr_in_ce0 <= ap_const_logic_1;
        else 
            point_arr_in_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    point_arr_in_ce1_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            point_arr_in_ce1 <= ap_const_logic_1;
        else 
            point_arr_in_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    point_arr_out_address0 <= zext_ln14_3_reg_301(11 - 1 downto 0);
    point_arr_out_address1 <= zext_ln14_5_reg_291(11 - 1 downto 0);

    point_arr_out_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            point_arr_out_ce0 <= ap_const_logic_1;
        else 
            point_arr_out_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    point_arr_out_ce1_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            point_arr_out_ce1 <= ap_const_logic_1;
        else 
            point_arr_out_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    point_arr_out_d0 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln14_fu_254_p1),192));
    point_arr_out_d1 <= (tmp_fu_235_p4 & ap_const_lv64_0);

    point_arr_out_we0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            point_arr_out_we0 <= ap_const_lv24_FF;
        else 
            point_arr_out_we0 <= ap_const_lv24_0;
        end if; 
    end process;


    point_arr_out_we1_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            point_arr_out_we1 <= ap_const_lv24_FFFF00;
        else 
            point_arr_out_we1 <= ap_const_lv24_0;
        end if; 
    end process;

        sext_ln14_fu_187_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln14_fu_181_p2),64));

    shl_ln14_1_fu_163_p3 <= (i_reg_125 & ap_const_lv3_0);
    shl_ln_fu_151_p3 <= (i_reg_125 & ap_const_lv5_0);
    sub_ln14_fu_175_p2 <= std_logic_vector(unsigned(zext_ln14_1_fu_159_p1) - unsigned(zext_ln14_2_fu_171_p1));
    tmp_fu_235_p4 <= point_arr_in_q1(191 downto 64);
    trunc_ln14_fu_254_p1 <= point_arr_in_q0(64 - 1 downto 0);
    zext_ln14_1_fu_159_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln_fu_151_p3),38));
    zext_ln14_2_fu_171_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln14_1_fu_163_p3),38));
    zext_ln14_3_fu_230_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln14_1_fu_225_p2),64));
    zext_ln14_5_fu_221_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_1_reg_281),64));
end behav;
