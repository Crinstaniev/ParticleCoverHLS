// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module system_top_patch_buffer_add_patch (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        new_patch_address0,
        new_patch_ce0,
        new_patch_q0,
        new_patch_address1,
        new_patch_ce1,
        new_patch_q1,
        patch_buffer_0_0_address0,
        patch_buffer_0_0_ce0,
        patch_buffer_0_0_we0,
        patch_buffer_0_0_d0,
        patch_buffer_0_1_address0,
        patch_buffer_0_1_ce0,
        patch_buffer_0_1_we0,
        patch_buffer_0_1_d0,
        patch_buffer_0_2_address0,
        patch_buffer_0_2_ce0,
        patch_buffer_0_2_we0,
        patch_buffer_0_2_d0,
        patch_buffer_0_3_address0,
        patch_buffer_0_3_ce0,
        patch_buffer_0_3_we0,
        patch_buffer_0_3_d0,
        patch_buffer_0_4_address0,
        patch_buffer_0_4_ce0,
        patch_buffer_0_4_we0,
        patch_buffer_0_4_d0,
        patch_buffer_0_5_address0,
        patch_buffer_0_5_ce0,
        patch_buffer_0_5_we0,
        patch_buffer_0_5_d0,
        patch_buffer_0_6_address0,
        patch_buffer_0_6_ce0,
        patch_buffer_0_6_we0,
        patch_buffer_0_6_d0,
        patch_buffer_0_7_address0,
        patch_buffer_0_7_ce0,
        patch_buffer_0_7_we0,
        patch_buffer_0_7_d0,
        patch_buffer_0_8_address0,
        patch_buffer_0_8_ce0,
        patch_buffer_0_8_we0,
        patch_buffer_0_8_d0,
        patch_buffer_0_9_address0,
        patch_buffer_0_9_ce0,
        patch_buffer_0_9_we0,
        patch_buffer_0_9_d0,
        patch_buffer_0_10_address0,
        patch_buffer_0_10_ce0,
        patch_buffer_0_10_we0,
        patch_buffer_0_10_d0,
        patch_buffer_0_11_address0,
        patch_buffer_0_11_ce0,
        patch_buffer_0_11_we0,
        patch_buffer_0_11_d0,
        patch_buffer_0_12_address0,
        patch_buffer_0_12_ce0,
        patch_buffer_0_12_we0,
        patch_buffer_0_12_d0,
        patch_buffer_0_13_address0,
        patch_buffer_0_13_ce0,
        patch_buffer_0_13_we0,
        patch_buffer_0_13_d0,
        patch_buffer_0_14_address0,
        patch_buffer_0_14_ce0,
        patch_buffer_0_14_we0,
        patch_buffer_0_14_d0,
        patch_buffer_0_15_address0,
        patch_buffer_0_15_ce0,
        patch_buffer_0_15_we0,
        patch_buffer_0_15_d0,
        patch_buffer_1_0_address0,
        patch_buffer_1_0_ce0,
        patch_buffer_1_0_we0,
        patch_buffer_1_0_d0,
        patch_buffer_1_1_address0,
        patch_buffer_1_1_ce0,
        patch_buffer_1_1_we0,
        patch_buffer_1_1_d0,
        patch_buffer_1_2_address0,
        patch_buffer_1_2_ce0,
        patch_buffer_1_2_we0,
        patch_buffer_1_2_d0,
        patch_buffer_1_3_address0,
        patch_buffer_1_3_ce0,
        patch_buffer_1_3_we0,
        patch_buffer_1_3_d0,
        patch_buffer_1_4_address0,
        patch_buffer_1_4_ce0,
        patch_buffer_1_4_we0,
        patch_buffer_1_4_d0,
        patch_buffer_1_5_address0,
        patch_buffer_1_5_ce0,
        patch_buffer_1_5_we0,
        patch_buffer_1_5_d0,
        patch_buffer_1_6_address0,
        patch_buffer_1_6_ce0,
        patch_buffer_1_6_we0,
        patch_buffer_1_6_d0,
        patch_buffer_1_7_address0,
        patch_buffer_1_7_ce0,
        patch_buffer_1_7_we0,
        patch_buffer_1_7_d0,
        patch_buffer_1_8_address0,
        patch_buffer_1_8_ce0,
        patch_buffer_1_8_we0,
        patch_buffer_1_8_d0,
        patch_buffer_1_9_address0,
        patch_buffer_1_9_ce0,
        patch_buffer_1_9_we0,
        patch_buffer_1_9_d0,
        patch_buffer_1_10_address0,
        patch_buffer_1_10_ce0,
        patch_buffer_1_10_we0,
        patch_buffer_1_10_d0,
        patch_buffer_1_11_address0,
        patch_buffer_1_11_ce0,
        patch_buffer_1_11_we0,
        patch_buffer_1_11_d0,
        patch_buffer_1_12_address0,
        patch_buffer_1_12_ce0,
        patch_buffer_1_12_we0,
        patch_buffer_1_12_d0,
        patch_buffer_1_13_address0,
        patch_buffer_1_13_ce0,
        patch_buffer_1_13_we0,
        patch_buffer_1_13_d0,
        patch_buffer_1_14_address0,
        patch_buffer_1_14_ce0,
        patch_buffer_1_14_we0,
        patch_buffer_1_14_d0,
        patch_buffer_1_15_address0,
        patch_buffer_1_15_ce0,
        patch_buffer_1_15_we0,
        patch_buffer_1_15_d0,
        patch_buffer_2_0_address0,
        patch_buffer_2_0_ce0,
        patch_buffer_2_0_we0,
        patch_buffer_2_0_d0,
        patch_buffer_2_1_address0,
        patch_buffer_2_1_ce0,
        patch_buffer_2_1_we0,
        patch_buffer_2_1_d0,
        patch_buffer_2_2_address0,
        patch_buffer_2_2_ce0,
        patch_buffer_2_2_we0,
        patch_buffer_2_2_d0,
        patch_buffer_2_3_address0,
        patch_buffer_2_3_ce0,
        patch_buffer_2_3_we0,
        patch_buffer_2_3_d0,
        patch_buffer_2_4_address0,
        patch_buffer_2_4_ce0,
        patch_buffer_2_4_we0,
        patch_buffer_2_4_d0,
        patch_buffer_2_5_address0,
        patch_buffer_2_5_ce0,
        patch_buffer_2_5_we0,
        patch_buffer_2_5_d0,
        patch_buffer_2_6_address0,
        patch_buffer_2_6_ce0,
        patch_buffer_2_6_we0,
        patch_buffer_2_6_d0,
        patch_buffer_2_7_address0,
        patch_buffer_2_7_ce0,
        patch_buffer_2_7_we0,
        patch_buffer_2_7_d0,
        patch_buffer_2_8_address0,
        patch_buffer_2_8_ce0,
        patch_buffer_2_8_we0,
        patch_buffer_2_8_d0,
        patch_buffer_2_9_address0,
        patch_buffer_2_9_ce0,
        patch_buffer_2_9_we0,
        patch_buffer_2_9_d0,
        patch_buffer_2_10_address0,
        patch_buffer_2_10_ce0,
        patch_buffer_2_10_we0,
        patch_buffer_2_10_d0,
        patch_buffer_2_11_address0,
        patch_buffer_2_11_ce0,
        patch_buffer_2_11_we0,
        patch_buffer_2_11_d0,
        patch_buffer_2_12_address0,
        patch_buffer_2_12_ce0,
        patch_buffer_2_12_we0,
        patch_buffer_2_12_d0,
        patch_buffer_2_13_address0,
        patch_buffer_2_13_ce0,
        patch_buffer_2_13_we0,
        patch_buffer_2_13_d0,
        patch_buffer_2_14_address0,
        patch_buffer_2_14_ce0,
        patch_buffer_2_14_we0,
        patch_buffer_2_14_d0,
        patch_buffer_2_15_address0,
        patch_buffer_2_15_ce0,
        patch_buffer_2_15_we0,
        patch_buffer_2_15_d0,
        patch_buffer_3_0_address0,
        patch_buffer_3_0_ce0,
        patch_buffer_3_0_we0,
        patch_buffer_3_0_d0,
        patch_buffer_3_1_address0,
        patch_buffer_3_1_ce0,
        patch_buffer_3_1_we0,
        patch_buffer_3_1_d0,
        patch_buffer_3_2_address0,
        patch_buffer_3_2_ce0,
        patch_buffer_3_2_we0,
        patch_buffer_3_2_d0,
        patch_buffer_3_3_address0,
        patch_buffer_3_3_ce0,
        patch_buffer_3_3_we0,
        patch_buffer_3_3_d0,
        patch_buffer_3_4_address0,
        patch_buffer_3_4_ce0,
        patch_buffer_3_4_we0,
        patch_buffer_3_4_d0,
        patch_buffer_3_5_address0,
        patch_buffer_3_5_ce0,
        patch_buffer_3_5_we0,
        patch_buffer_3_5_d0,
        patch_buffer_3_6_address0,
        patch_buffer_3_6_ce0,
        patch_buffer_3_6_we0,
        patch_buffer_3_6_d0,
        patch_buffer_3_7_address0,
        patch_buffer_3_7_ce0,
        patch_buffer_3_7_we0,
        patch_buffer_3_7_d0,
        patch_buffer_3_8_address0,
        patch_buffer_3_8_ce0,
        patch_buffer_3_8_we0,
        patch_buffer_3_8_d0,
        patch_buffer_3_9_address0,
        patch_buffer_3_9_ce0,
        patch_buffer_3_9_we0,
        patch_buffer_3_9_d0,
        patch_buffer_3_10_address0,
        patch_buffer_3_10_ce0,
        patch_buffer_3_10_we0,
        patch_buffer_3_10_d0,
        patch_buffer_3_11_address0,
        patch_buffer_3_11_ce0,
        patch_buffer_3_11_we0,
        patch_buffer_3_11_d0,
        patch_buffer_3_12_address0,
        patch_buffer_3_12_ce0,
        patch_buffer_3_12_we0,
        patch_buffer_3_12_d0,
        patch_buffer_3_13_address0,
        patch_buffer_3_13_ce0,
        patch_buffer_3_13_we0,
        patch_buffer_3_13_d0,
        patch_buffer_3_14_address0,
        patch_buffer_3_14_ce0,
        patch_buffer_3_14_we0,
        patch_buffer_3_14_d0,
        patch_buffer_3_15_address0,
        patch_buffer_3_15_ce0,
        patch_buffer_3_15_we0,
        patch_buffer_3_15_d0,
        patch_buffer_4_0_address0,
        patch_buffer_4_0_ce0,
        patch_buffer_4_0_we0,
        patch_buffer_4_0_d0,
        patch_buffer_4_1_address0,
        patch_buffer_4_1_ce0,
        patch_buffer_4_1_we0,
        patch_buffer_4_1_d0,
        patch_buffer_4_2_address0,
        patch_buffer_4_2_ce0,
        patch_buffer_4_2_we0,
        patch_buffer_4_2_d0,
        patch_buffer_4_3_address0,
        patch_buffer_4_3_ce0,
        patch_buffer_4_3_we0,
        patch_buffer_4_3_d0,
        patch_buffer_4_4_address0,
        patch_buffer_4_4_ce0,
        patch_buffer_4_4_we0,
        patch_buffer_4_4_d0,
        patch_buffer_4_5_address0,
        patch_buffer_4_5_ce0,
        patch_buffer_4_5_we0,
        patch_buffer_4_5_d0,
        patch_buffer_4_6_address0,
        patch_buffer_4_6_ce0,
        patch_buffer_4_6_we0,
        patch_buffer_4_6_d0,
        patch_buffer_4_7_address0,
        patch_buffer_4_7_ce0,
        patch_buffer_4_7_we0,
        patch_buffer_4_7_d0,
        patch_buffer_4_8_address0,
        patch_buffer_4_8_ce0,
        patch_buffer_4_8_we0,
        patch_buffer_4_8_d0,
        patch_buffer_4_9_address0,
        patch_buffer_4_9_ce0,
        patch_buffer_4_9_we0,
        patch_buffer_4_9_d0,
        patch_buffer_4_10_address0,
        patch_buffer_4_10_ce0,
        patch_buffer_4_10_we0,
        patch_buffer_4_10_d0,
        patch_buffer_4_11_address0,
        patch_buffer_4_11_ce0,
        patch_buffer_4_11_we0,
        patch_buffer_4_11_d0,
        patch_buffer_4_12_address0,
        patch_buffer_4_12_ce0,
        patch_buffer_4_12_we0,
        patch_buffer_4_12_d0,
        patch_buffer_4_13_address0,
        patch_buffer_4_13_ce0,
        patch_buffer_4_13_we0,
        patch_buffer_4_13_d0,
        patch_buffer_4_14_address0,
        patch_buffer_4_14_ce0,
        patch_buffer_4_14_we0,
        patch_buffer_4_14_d0,
        patch_buffer_4_15_address0,
        patch_buffer_4_15_ce0,
        patch_buffer_4_15_we0,
        patch_buffer_4_15_d0,
        latest_patch_index_constprop_i,
        latest_patch_index_constprop_o,
        latest_patch_index_constprop_o_ap_vld,
        num_patches_constprop_i,
        num_patches_constprop_o,
        num_patches_constprop_o_ap_vld
);

parameter    ap_ST_fsm_state1 = 41'd1;
parameter    ap_ST_fsm_state2 = 41'd2;
parameter    ap_ST_fsm_state3 = 41'd4;
parameter    ap_ST_fsm_state4 = 41'd8;
parameter    ap_ST_fsm_state5 = 41'd16;
parameter    ap_ST_fsm_state6 = 41'd32;
parameter    ap_ST_fsm_state7 = 41'd64;
parameter    ap_ST_fsm_state8 = 41'd128;
parameter    ap_ST_fsm_state9 = 41'd256;
parameter    ap_ST_fsm_state10 = 41'd512;
parameter    ap_ST_fsm_state11 = 41'd1024;
parameter    ap_ST_fsm_state12 = 41'd2048;
parameter    ap_ST_fsm_state13 = 41'd4096;
parameter    ap_ST_fsm_state14 = 41'd8192;
parameter    ap_ST_fsm_state15 = 41'd16384;
parameter    ap_ST_fsm_state16 = 41'd32768;
parameter    ap_ST_fsm_state17 = 41'd65536;
parameter    ap_ST_fsm_state18 = 41'd131072;
parameter    ap_ST_fsm_state19 = 41'd262144;
parameter    ap_ST_fsm_state20 = 41'd524288;
parameter    ap_ST_fsm_state21 = 41'd1048576;
parameter    ap_ST_fsm_state22 = 41'd2097152;
parameter    ap_ST_fsm_state23 = 41'd4194304;
parameter    ap_ST_fsm_state24 = 41'd8388608;
parameter    ap_ST_fsm_state25 = 41'd16777216;
parameter    ap_ST_fsm_state26 = 41'd33554432;
parameter    ap_ST_fsm_state27 = 41'd67108864;
parameter    ap_ST_fsm_state28 = 41'd134217728;
parameter    ap_ST_fsm_state29 = 41'd268435456;
parameter    ap_ST_fsm_state30 = 41'd536870912;
parameter    ap_ST_fsm_state31 = 41'd1073741824;
parameter    ap_ST_fsm_state32 = 41'd2147483648;
parameter    ap_ST_fsm_state33 = 41'd4294967296;
parameter    ap_ST_fsm_state34 = 41'd8589934592;
parameter    ap_ST_fsm_state35 = 41'd17179869184;
parameter    ap_ST_fsm_state36 = 41'd34359738368;
parameter    ap_ST_fsm_state37 = 41'd68719476736;
parameter    ap_ST_fsm_state38 = 41'd137438953472;
parameter    ap_ST_fsm_state39 = 41'd274877906944;
parameter    ap_ST_fsm_state40 = 41'd549755813888;
parameter    ap_ST_fsm_state41 = 41'd1099511627776;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [6:0] new_patch_address0;
output   new_patch_ce0;
input  [95:0] new_patch_q0;
output  [6:0] new_patch_address1;
output   new_patch_ce1;
input  [95:0] new_patch_q1;
output  [1:0] patch_buffer_0_0_address0;
output   patch_buffer_0_0_ce0;
output   patch_buffer_0_0_we0;
output  [95:0] patch_buffer_0_0_d0;
output  [1:0] patch_buffer_0_1_address0;
output   patch_buffer_0_1_ce0;
output   patch_buffer_0_1_we0;
output  [95:0] patch_buffer_0_1_d0;
output  [1:0] patch_buffer_0_2_address0;
output   patch_buffer_0_2_ce0;
output   patch_buffer_0_2_we0;
output  [95:0] patch_buffer_0_2_d0;
output  [1:0] patch_buffer_0_3_address0;
output   patch_buffer_0_3_ce0;
output   patch_buffer_0_3_we0;
output  [95:0] patch_buffer_0_3_d0;
output  [1:0] patch_buffer_0_4_address0;
output   patch_buffer_0_4_ce0;
output   patch_buffer_0_4_we0;
output  [95:0] patch_buffer_0_4_d0;
output  [1:0] patch_buffer_0_5_address0;
output   patch_buffer_0_5_ce0;
output   patch_buffer_0_5_we0;
output  [95:0] patch_buffer_0_5_d0;
output  [1:0] patch_buffer_0_6_address0;
output   patch_buffer_0_6_ce0;
output   patch_buffer_0_6_we0;
output  [95:0] patch_buffer_0_6_d0;
output  [1:0] patch_buffer_0_7_address0;
output   patch_buffer_0_7_ce0;
output   patch_buffer_0_7_we0;
output  [95:0] patch_buffer_0_7_d0;
output  [1:0] patch_buffer_0_8_address0;
output   patch_buffer_0_8_ce0;
output   patch_buffer_0_8_we0;
output  [95:0] patch_buffer_0_8_d0;
output  [1:0] patch_buffer_0_9_address0;
output   patch_buffer_0_9_ce0;
output   patch_buffer_0_9_we0;
output  [95:0] patch_buffer_0_9_d0;
output  [1:0] patch_buffer_0_10_address0;
output   patch_buffer_0_10_ce0;
output   patch_buffer_0_10_we0;
output  [95:0] patch_buffer_0_10_d0;
output  [1:0] patch_buffer_0_11_address0;
output   patch_buffer_0_11_ce0;
output   patch_buffer_0_11_we0;
output  [95:0] patch_buffer_0_11_d0;
output  [1:0] patch_buffer_0_12_address0;
output   patch_buffer_0_12_ce0;
output   patch_buffer_0_12_we0;
output  [95:0] patch_buffer_0_12_d0;
output  [1:0] patch_buffer_0_13_address0;
output   patch_buffer_0_13_ce0;
output   patch_buffer_0_13_we0;
output  [95:0] patch_buffer_0_13_d0;
output  [1:0] patch_buffer_0_14_address0;
output   patch_buffer_0_14_ce0;
output   patch_buffer_0_14_we0;
output  [95:0] patch_buffer_0_14_d0;
output  [1:0] patch_buffer_0_15_address0;
output   patch_buffer_0_15_ce0;
output   patch_buffer_0_15_we0;
output  [95:0] patch_buffer_0_15_d0;
output  [1:0] patch_buffer_1_0_address0;
output   patch_buffer_1_0_ce0;
output   patch_buffer_1_0_we0;
output  [95:0] patch_buffer_1_0_d0;
output  [1:0] patch_buffer_1_1_address0;
output   patch_buffer_1_1_ce0;
output   patch_buffer_1_1_we0;
output  [95:0] patch_buffer_1_1_d0;
output  [1:0] patch_buffer_1_2_address0;
output   patch_buffer_1_2_ce0;
output   patch_buffer_1_2_we0;
output  [95:0] patch_buffer_1_2_d0;
output  [1:0] patch_buffer_1_3_address0;
output   patch_buffer_1_3_ce0;
output   patch_buffer_1_3_we0;
output  [95:0] patch_buffer_1_3_d0;
output  [1:0] patch_buffer_1_4_address0;
output   patch_buffer_1_4_ce0;
output   patch_buffer_1_4_we0;
output  [95:0] patch_buffer_1_4_d0;
output  [1:0] patch_buffer_1_5_address0;
output   patch_buffer_1_5_ce0;
output   patch_buffer_1_5_we0;
output  [95:0] patch_buffer_1_5_d0;
output  [1:0] patch_buffer_1_6_address0;
output   patch_buffer_1_6_ce0;
output   patch_buffer_1_6_we0;
output  [95:0] patch_buffer_1_6_d0;
output  [1:0] patch_buffer_1_7_address0;
output   patch_buffer_1_7_ce0;
output   patch_buffer_1_7_we0;
output  [95:0] patch_buffer_1_7_d0;
output  [1:0] patch_buffer_1_8_address0;
output   patch_buffer_1_8_ce0;
output   patch_buffer_1_8_we0;
output  [95:0] patch_buffer_1_8_d0;
output  [1:0] patch_buffer_1_9_address0;
output   patch_buffer_1_9_ce0;
output   patch_buffer_1_9_we0;
output  [95:0] patch_buffer_1_9_d0;
output  [1:0] patch_buffer_1_10_address0;
output   patch_buffer_1_10_ce0;
output   patch_buffer_1_10_we0;
output  [95:0] patch_buffer_1_10_d0;
output  [1:0] patch_buffer_1_11_address0;
output   patch_buffer_1_11_ce0;
output   patch_buffer_1_11_we0;
output  [95:0] patch_buffer_1_11_d0;
output  [1:0] patch_buffer_1_12_address0;
output   patch_buffer_1_12_ce0;
output   patch_buffer_1_12_we0;
output  [95:0] patch_buffer_1_12_d0;
output  [1:0] patch_buffer_1_13_address0;
output   patch_buffer_1_13_ce0;
output   patch_buffer_1_13_we0;
output  [95:0] patch_buffer_1_13_d0;
output  [1:0] patch_buffer_1_14_address0;
output   patch_buffer_1_14_ce0;
output   patch_buffer_1_14_we0;
output  [95:0] patch_buffer_1_14_d0;
output  [1:0] patch_buffer_1_15_address0;
output   patch_buffer_1_15_ce0;
output   patch_buffer_1_15_we0;
output  [95:0] patch_buffer_1_15_d0;
output  [1:0] patch_buffer_2_0_address0;
output   patch_buffer_2_0_ce0;
output   patch_buffer_2_0_we0;
output  [95:0] patch_buffer_2_0_d0;
output  [1:0] patch_buffer_2_1_address0;
output   patch_buffer_2_1_ce0;
output   patch_buffer_2_1_we0;
output  [95:0] patch_buffer_2_1_d0;
output  [1:0] patch_buffer_2_2_address0;
output   patch_buffer_2_2_ce0;
output   patch_buffer_2_2_we0;
output  [95:0] patch_buffer_2_2_d0;
output  [1:0] patch_buffer_2_3_address0;
output   patch_buffer_2_3_ce0;
output   patch_buffer_2_3_we0;
output  [95:0] patch_buffer_2_3_d0;
output  [1:0] patch_buffer_2_4_address0;
output   patch_buffer_2_4_ce0;
output   patch_buffer_2_4_we0;
output  [95:0] patch_buffer_2_4_d0;
output  [1:0] patch_buffer_2_5_address0;
output   patch_buffer_2_5_ce0;
output   patch_buffer_2_5_we0;
output  [95:0] patch_buffer_2_5_d0;
output  [1:0] patch_buffer_2_6_address0;
output   patch_buffer_2_6_ce0;
output   patch_buffer_2_6_we0;
output  [95:0] patch_buffer_2_6_d0;
output  [1:0] patch_buffer_2_7_address0;
output   patch_buffer_2_7_ce0;
output   patch_buffer_2_7_we0;
output  [95:0] patch_buffer_2_7_d0;
output  [1:0] patch_buffer_2_8_address0;
output   patch_buffer_2_8_ce0;
output   patch_buffer_2_8_we0;
output  [95:0] patch_buffer_2_8_d0;
output  [1:0] patch_buffer_2_9_address0;
output   patch_buffer_2_9_ce0;
output   patch_buffer_2_9_we0;
output  [95:0] patch_buffer_2_9_d0;
output  [1:0] patch_buffer_2_10_address0;
output   patch_buffer_2_10_ce0;
output   patch_buffer_2_10_we0;
output  [95:0] patch_buffer_2_10_d0;
output  [1:0] patch_buffer_2_11_address0;
output   patch_buffer_2_11_ce0;
output   patch_buffer_2_11_we0;
output  [95:0] patch_buffer_2_11_d0;
output  [1:0] patch_buffer_2_12_address0;
output   patch_buffer_2_12_ce0;
output   patch_buffer_2_12_we0;
output  [95:0] patch_buffer_2_12_d0;
output  [1:0] patch_buffer_2_13_address0;
output   patch_buffer_2_13_ce0;
output   patch_buffer_2_13_we0;
output  [95:0] patch_buffer_2_13_d0;
output  [1:0] patch_buffer_2_14_address0;
output   patch_buffer_2_14_ce0;
output   patch_buffer_2_14_we0;
output  [95:0] patch_buffer_2_14_d0;
output  [1:0] patch_buffer_2_15_address0;
output   patch_buffer_2_15_ce0;
output   patch_buffer_2_15_we0;
output  [95:0] patch_buffer_2_15_d0;
output  [1:0] patch_buffer_3_0_address0;
output   patch_buffer_3_0_ce0;
output   patch_buffer_3_0_we0;
output  [95:0] patch_buffer_3_0_d0;
output  [1:0] patch_buffer_3_1_address0;
output   patch_buffer_3_1_ce0;
output   patch_buffer_3_1_we0;
output  [95:0] patch_buffer_3_1_d0;
output  [1:0] patch_buffer_3_2_address0;
output   patch_buffer_3_2_ce0;
output   patch_buffer_3_2_we0;
output  [95:0] patch_buffer_3_2_d0;
output  [1:0] patch_buffer_3_3_address0;
output   patch_buffer_3_3_ce0;
output   patch_buffer_3_3_we0;
output  [95:0] patch_buffer_3_3_d0;
output  [1:0] patch_buffer_3_4_address0;
output   patch_buffer_3_4_ce0;
output   patch_buffer_3_4_we0;
output  [95:0] patch_buffer_3_4_d0;
output  [1:0] patch_buffer_3_5_address0;
output   patch_buffer_3_5_ce0;
output   patch_buffer_3_5_we0;
output  [95:0] patch_buffer_3_5_d0;
output  [1:0] patch_buffer_3_6_address0;
output   patch_buffer_3_6_ce0;
output   patch_buffer_3_6_we0;
output  [95:0] patch_buffer_3_6_d0;
output  [1:0] patch_buffer_3_7_address0;
output   patch_buffer_3_7_ce0;
output   patch_buffer_3_7_we0;
output  [95:0] patch_buffer_3_7_d0;
output  [1:0] patch_buffer_3_8_address0;
output   patch_buffer_3_8_ce0;
output   patch_buffer_3_8_we0;
output  [95:0] patch_buffer_3_8_d0;
output  [1:0] patch_buffer_3_9_address0;
output   patch_buffer_3_9_ce0;
output   patch_buffer_3_9_we0;
output  [95:0] patch_buffer_3_9_d0;
output  [1:0] patch_buffer_3_10_address0;
output   patch_buffer_3_10_ce0;
output   patch_buffer_3_10_we0;
output  [95:0] patch_buffer_3_10_d0;
output  [1:0] patch_buffer_3_11_address0;
output   patch_buffer_3_11_ce0;
output   patch_buffer_3_11_we0;
output  [95:0] patch_buffer_3_11_d0;
output  [1:0] patch_buffer_3_12_address0;
output   patch_buffer_3_12_ce0;
output   patch_buffer_3_12_we0;
output  [95:0] patch_buffer_3_12_d0;
output  [1:0] patch_buffer_3_13_address0;
output   patch_buffer_3_13_ce0;
output   patch_buffer_3_13_we0;
output  [95:0] patch_buffer_3_13_d0;
output  [1:0] patch_buffer_3_14_address0;
output   patch_buffer_3_14_ce0;
output   patch_buffer_3_14_we0;
output  [95:0] patch_buffer_3_14_d0;
output  [1:0] patch_buffer_3_15_address0;
output   patch_buffer_3_15_ce0;
output   patch_buffer_3_15_we0;
output  [95:0] patch_buffer_3_15_d0;
output  [1:0] patch_buffer_4_0_address0;
output   patch_buffer_4_0_ce0;
output   patch_buffer_4_0_we0;
output  [95:0] patch_buffer_4_0_d0;
output  [1:0] patch_buffer_4_1_address0;
output   patch_buffer_4_1_ce0;
output   patch_buffer_4_1_we0;
output  [95:0] patch_buffer_4_1_d0;
output  [1:0] patch_buffer_4_2_address0;
output   patch_buffer_4_2_ce0;
output   patch_buffer_4_2_we0;
output  [95:0] patch_buffer_4_2_d0;
output  [1:0] patch_buffer_4_3_address0;
output   patch_buffer_4_3_ce0;
output   patch_buffer_4_3_we0;
output  [95:0] patch_buffer_4_3_d0;
output  [1:0] patch_buffer_4_4_address0;
output   patch_buffer_4_4_ce0;
output   patch_buffer_4_4_we0;
output  [95:0] patch_buffer_4_4_d0;
output  [1:0] patch_buffer_4_5_address0;
output   patch_buffer_4_5_ce0;
output   patch_buffer_4_5_we0;
output  [95:0] patch_buffer_4_5_d0;
output  [1:0] patch_buffer_4_6_address0;
output   patch_buffer_4_6_ce0;
output   patch_buffer_4_6_we0;
output  [95:0] patch_buffer_4_6_d0;
output  [1:0] patch_buffer_4_7_address0;
output   patch_buffer_4_7_ce0;
output   patch_buffer_4_7_we0;
output  [95:0] patch_buffer_4_7_d0;
output  [1:0] patch_buffer_4_8_address0;
output   patch_buffer_4_8_ce0;
output   patch_buffer_4_8_we0;
output  [95:0] patch_buffer_4_8_d0;
output  [1:0] patch_buffer_4_9_address0;
output   patch_buffer_4_9_ce0;
output   patch_buffer_4_9_we0;
output  [95:0] patch_buffer_4_9_d0;
output  [1:0] patch_buffer_4_10_address0;
output   patch_buffer_4_10_ce0;
output   patch_buffer_4_10_we0;
output  [95:0] patch_buffer_4_10_d0;
output  [1:0] patch_buffer_4_11_address0;
output   patch_buffer_4_11_ce0;
output   patch_buffer_4_11_we0;
output  [95:0] patch_buffer_4_11_d0;
output  [1:0] patch_buffer_4_12_address0;
output   patch_buffer_4_12_ce0;
output   patch_buffer_4_12_we0;
output  [95:0] patch_buffer_4_12_d0;
output  [1:0] patch_buffer_4_13_address0;
output   patch_buffer_4_13_ce0;
output   patch_buffer_4_13_we0;
output  [95:0] patch_buffer_4_13_d0;
output  [1:0] patch_buffer_4_14_address0;
output   patch_buffer_4_14_ce0;
output   patch_buffer_4_14_we0;
output  [95:0] patch_buffer_4_14_d0;
output  [1:0] patch_buffer_4_15_address0;
output   patch_buffer_4_15_ce0;
output   patch_buffer_4_15_we0;
output  [95:0] patch_buffer_4_15_d0;
input  [1:0] latest_patch_index_constprop_i;
output  [1:0] latest_patch_index_constprop_o;
output   latest_patch_index_constprop_o_ap_vld;
input  [31:0] num_patches_constprop_i;
output  [31:0] num_patches_constprop_o;
output   num_patches_constprop_o_ap_vld;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[6:0] new_patch_address0;
reg new_patch_ce0;
reg[6:0] new_patch_address1;
reg new_patch_ce1;
reg patch_buffer_0_0_ce0;
reg patch_buffer_0_0_we0;
reg patch_buffer_0_1_ce0;
reg patch_buffer_0_1_we0;
reg patch_buffer_0_2_ce0;
reg patch_buffer_0_2_we0;
reg patch_buffer_0_3_ce0;
reg patch_buffer_0_3_we0;
reg patch_buffer_0_4_ce0;
reg patch_buffer_0_4_we0;
reg patch_buffer_0_5_ce0;
reg patch_buffer_0_5_we0;
reg patch_buffer_0_6_ce0;
reg patch_buffer_0_6_we0;
reg patch_buffer_0_7_ce0;
reg patch_buffer_0_7_we0;
reg patch_buffer_0_8_ce0;
reg patch_buffer_0_8_we0;
reg patch_buffer_0_9_ce0;
reg patch_buffer_0_9_we0;
reg patch_buffer_0_10_ce0;
reg patch_buffer_0_10_we0;
reg patch_buffer_0_11_ce0;
reg patch_buffer_0_11_we0;
reg patch_buffer_0_12_ce0;
reg patch_buffer_0_12_we0;
reg patch_buffer_0_13_ce0;
reg patch_buffer_0_13_we0;
reg patch_buffer_0_14_ce0;
reg patch_buffer_0_14_we0;
reg patch_buffer_0_15_ce0;
reg patch_buffer_0_15_we0;
reg patch_buffer_1_0_ce0;
reg patch_buffer_1_0_we0;
reg patch_buffer_1_1_ce0;
reg patch_buffer_1_1_we0;
reg patch_buffer_1_2_ce0;
reg patch_buffer_1_2_we0;
reg patch_buffer_1_3_ce0;
reg patch_buffer_1_3_we0;
reg patch_buffer_1_4_ce0;
reg patch_buffer_1_4_we0;
reg patch_buffer_1_5_ce0;
reg patch_buffer_1_5_we0;
reg patch_buffer_1_6_ce0;
reg patch_buffer_1_6_we0;
reg patch_buffer_1_7_ce0;
reg patch_buffer_1_7_we0;
reg patch_buffer_1_8_ce0;
reg patch_buffer_1_8_we0;
reg patch_buffer_1_9_ce0;
reg patch_buffer_1_9_we0;
reg patch_buffer_1_10_ce0;
reg patch_buffer_1_10_we0;
reg patch_buffer_1_11_ce0;
reg patch_buffer_1_11_we0;
reg patch_buffer_1_12_ce0;
reg patch_buffer_1_12_we0;
reg patch_buffer_1_13_ce0;
reg patch_buffer_1_13_we0;
reg patch_buffer_1_14_ce0;
reg patch_buffer_1_14_we0;
reg patch_buffer_1_15_ce0;
reg patch_buffer_1_15_we0;
reg patch_buffer_2_0_ce0;
reg patch_buffer_2_0_we0;
reg patch_buffer_2_1_ce0;
reg patch_buffer_2_1_we0;
reg patch_buffer_2_2_ce0;
reg patch_buffer_2_2_we0;
reg patch_buffer_2_3_ce0;
reg patch_buffer_2_3_we0;
reg patch_buffer_2_4_ce0;
reg patch_buffer_2_4_we0;
reg patch_buffer_2_5_ce0;
reg patch_buffer_2_5_we0;
reg patch_buffer_2_6_ce0;
reg patch_buffer_2_6_we0;
reg patch_buffer_2_7_ce0;
reg patch_buffer_2_7_we0;
reg patch_buffer_2_8_ce0;
reg patch_buffer_2_8_we0;
reg patch_buffer_2_9_ce0;
reg patch_buffer_2_9_we0;
reg patch_buffer_2_10_ce0;
reg patch_buffer_2_10_we0;
reg patch_buffer_2_11_ce0;
reg patch_buffer_2_11_we0;
reg patch_buffer_2_12_ce0;
reg patch_buffer_2_12_we0;
reg patch_buffer_2_13_ce0;
reg patch_buffer_2_13_we0;
reg patch_buffer_2_14_ce0;
reg patch_buffer_2_14_we0;
reg patch_buffer_2_15_ce0;
reg patch_buffer_2_15_we0;
reg patch_buffer_3_0_ce0;
reg patch_buffer_3_0_we0;
reg patch_buffer_3_1_ce0;
reg patch_buffer_3_1_we0;
reg patch_buffer_3_2_ce0;
reg patch_buffer_3_2_we0;
reg patch_buffer_3_3_ce0;
reg patch_buffer_3_3_we0;
reg patch_buffer_3_4_ce0;
reg patch_buffer_3_4_we0;
reg patch_buffer_3_5_ce0;
reg patch_buffer_3_5_we0;
reg patch_buffer_3_6_ce0;
reg patch_buffer_3_6_we0;
reg patch_buffer_3_7_ce0;
reg patch_buffer_3_7_we0;
reg patch_buffer_3_8_ce0;
reg patch_buffer_3_8_we0;
reg patch_buffer_3_9_ce0;
reg patch_buffer_3_9_we0;
reg patch_buffer_3_10_ce0;
reg patch_buffer_3_10_we0;
reg patch_buffer_3_11_ce0;
reg patch_buffer_3_11_we0;
reg patch_buffer_3_12_ce0;
reg patch_buffer_3_12_we0;
reg patch_buffer_3_13_ce0;
reg patch_buffer_3_13_we0;
reg patch_buffer_3_14_ce0;
reg patch_buffer_3_14_we0;
reg patch_buffer_3_15_ce0;
reg patch_buffer_3_15_we0;
reg patch_buffer_4_0_ce0;
reg patch_buffer_4_0_we0;
reg patch_buffer_4_1_ce0;
reg patch_buffer_4_1_we0;
reg patch_buffer_4_2_ce0;
reg patch_buffer_4_2_we0;
reg patch_buffer_4_3_ce0;
reg patch_buffer_4_3_we0;
reg patch_buffer_4_4_ce0;
reg patch_buffer_4_4_we0;
reg patch_buffer_4_5_ce0;
reg patch_buffer_4_5_we0;
reg patch_buffer_4_6_ce0;
reg patch_buffer_4_6_we0;
reg patch_buffer_4_7_ce0;
reg patch_buffer_4_7_we0;
reg patch_buffer_4_8_ce0;
reg patch_buffer_4_8_we0;
reg patch_buffer_4_9_ce0;
reg patch_buffer_4_9_we0;
reg patch_buffer_4_10_ce0;
reg patch_buffer_4_10_we0;
reg patch_buffer_4_11_ce0;
reg patch_buffer_4_11_we0;
reg patch_buffer_4_12_ce0;
reg patch_buffer_4_12_we0;
reg patch_buffer_4_13_ce0;
reg patch_buffer_4_13_we0;
reg patch_buffer_4_14_ce0;
reg patch_buffer_4_14_we0;
reg patch_buffer_4_15_ce0;
reg patch_buffer_4_15_we0;
reg[1:0] latest_patch_index_constprop_o;
reg latest_patch_index_constprop_o_ap_vld;
reg[31:0] num_patches_constprop_o;
reg num_patches_constprop_o_ap_vld;

(* fsm_encoding = "none" *) reg   [40:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire    ap_CS_fsm_state2;
wire   [63:0] idxprom4_fu_2243_p1;
reg   [63:0] idxprom4_reg_2269;
wire    ap_CS_fsm_state3;
wire    ap_CS_fsm_state4;
wire    ap_CS_fsm_state5;
wire    ap_CS_fsm_state6;
wire    ap_CS_fsm_state7;
wire    ap_CS_fsm_state8;
wire    ap_CS_fsm_state9;
wire    ap_CS_fsm_state10;
wire    ap_CS_fsm_state11;
wire    ap_CS_fsm_state12;
wire    ap_CS_fsm_state13;
wire    ap_CS_fsm_state14;
wire    ap_CS_fsm_state15;
wire    ap_CS_fsm_state16;
wire    ap_CS_fsm_state17;
wire    ap_CS_fsm_state18;
wire    ap_CS_fsm_state19;
wire    ap_CS_fsm_state20;
wire    ap_CS_fsm_state21;
wire    ap_CS_fsm_state22;
wire    ap_CS_fsm_state23;
wire    ap_CS_fsm_state24;
wire    ap_CS_fsm_state25;
wire    ap_CS_fsm_state26;
wire    ap_CS_fsm_state27;
wire    ap_CS_fsm_state28;
wire    ap_CS_fsm_state29;
wire    ap_CS_fsm_state30;
wire    ap_CS_fsm_state31;
wire    ap_CS_fsm_state32;
wire    ap_CS_fsm_state33;
wire    ap_CS_fsm_state34;
wire    ap_CS_fsm_state35;
wire    ap_CS_fsm_state36;
wire    ap_CS_fsm_state37;
wire    ap_CS_fsm_state38;
wire    ap_CS_fsm_state39;
wire    ap_CS_fsm_state40;
wire    ap_CS_fsm_state41;
wire   [1:0] select_ln15_fu_2229_p3;
wire   [31:0] add_ln16_fu_2187_p2;
wire   [2:0] zext_ln15_fu_2203_p1;
wire   [2:0] add_ln15_fu_2207_p2;
wire   [0:0] icmp_ln15_fu_2217_p2;
wire   [1:0] trunc_ln15_fu_2213_p1;
wire   [1:0] xor_ln15_fu_2223_p2;
reg   [40:0] ap_NS_fsm;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 41'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        idxprom4_reg_2269[1 : 0] <= idxprom4_fu_2243_p1[1 : 0];
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state41) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state41)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        latest_patch_index_constprop_o = select_ln15_fu_2229_p3;
    end else begin
        latest_patch_index_constprop_o = latest_patch_index_constprop_i;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        latest_patch_index_constprop_o_ap_vld = 1'b1;
    end else begin
        latest_patch_index_constprop_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state40)) begin
        new_patch_address0 = 64'd79;
    end else if ((1'b1 == ap_CS_fsm_state39)) begin
        new_patch_address0 = 64'd77;
    end else if ((1'b1 == ap_CS_fsm_state38)) begin
        new_patch_address0 = 64'd75;
    end else if ((1'b1 == ap_CS_fsm_state37)) begin
        new_patch_address0 = 64'd73;
    end else if ((1'b1 == ap_CS_fsm_state36)) begin
        new_patch_address0 = 64'd71;
    end else if ((1'b1 == ap_CS_fsm_state35)) begin
        new_patch_address0 = 64'd69;
    end else if ((1'b1 == ap_CS_fsm_state34)) begin
        new_patch_address0 = 64'd67;
    end else if ((1'b1 == ap_CS_fsm_state33)) begin
        new_patch_address0 = 64'd65;
    end else if ((1'b1 == ap_CS_fsm_state32)) begin
        new_patch_address0 = 64'd63;
    end else if ((1'b1 == ap_CS_fsm_state31)) begin
        new_patch_address0 = 64'd61;
    end else if ((1'b1 == ap_CS_fsm_state30)) begin
        new_patch_address0 = 64'd59;
    end else if ((1'b1 == ap_CS_fsm_state29)) begin
        new_patch_address0 = 64'd57;
    end else if ((1'b1 == ap_CS_fsm_state28)) begin
        new_patch_address0 = 64'd55;
    end else if ((1'b1 == ap_CS_fsm_state27)) begin
        new_patch_address0 = 64'd53;
    end else if ((1'b1 == ap_CS_fsm_state26)) begin
        new_patch_address0 = 64'd51;
    end else if ((1'b1 == ap_CS_fsm_state25)) begin
        new_patch_address0 = 64'd49;
    end else if ((1'b1 == ap_CS_fsm_state24)) begin
        new_patch_address0 = 64'd47;
    end else if ((1'b1 == ap_CS_fsm_state23)) begin
        new_patch_address0 = 64'd45;
    end else if ((1'b1 == ap_CS_fsm_state22)) begin
        new_patch_address0 = 64'd43;
    end else if ((1'b1 == ap_CS_fsm_state21)) begin
        new_patch_address0 = 64'd41;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        new_patch_address0 = 64'd39;
    end else if ((1'b1 == ap_CS_fsm_state19)) begin
        new_patch_address0 = 64'd37;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        new_patch_address0 = 64'd35;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        new_patch_address0 = 64'd33;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        new_patch_address0 = 64'd31;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        new_patch_address0 = 64'd29;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        new_patch_address0 = 64'd27;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        new_patch_address0 = 64'd25;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        new_patch_address0 = 64'd23;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        new_patch_address0 = 64'd21;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        new_patch_address0 = 64'd19;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        new_patch_address0 = 64'd17;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        new_patch_address0 = 64'd15;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        new_patch_address0 = 64'd13;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        new_patch_address0 = 64'd11;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        new_patch_address0 = 64'd9;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        new_patch_address0 = 64'd7;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        new_patch_address0 = 64'd5;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        new_patch_address0 = 64'd3;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        new_patch_address0 = 64'd1;
    end else begin
        new_patch_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state40)) begin
        new_patch_address1 = 64'd78;
    end else if ((1'b1 == ap_CS_fsm_state39)) begin
        new_patch_address1 = 64'd76;
    end else if ((1'b1 == ap_CS_fsm_state38)) begin
        new_patch_address1 = 64'd74;
    end else if ((1'b1 == ap_CS_fsm_state37)) begin
        new_patch_address1 = 64'd72;
    end else if ((1'b1 == ap_CS_fsm_state36)) begin
        new_patch_address1 = 64'd70;
    end else if ((1'b1 == ap_CS_fsm_state35)) begin
        new_patch_address1 = 64'd68;
    end else if ((1'b1 == ap_CS_fsm_state34)) begin
        new_patch_address1 = 64'd66;
    end else if ((1'b1 == ap_CS_fsm_state33)) begin
        new_patch_address1 = 64'd64;
    end else if ((1'b1 == ap_CS_fsm_state32)) begin
        new_patch_address1 = 64'd62;
    end else if ((1'b1 == ap_CS_fsm_state31)) begin
        new_patch_address1 = 64'd60;
    end else if ((1'b1 == ap_CS_fsm_state30)) begin
        new_patch_address1 = 64'd58;
    end else if ((1'b1 == ap_CS_fsm_state29)) begin
        new_patch_address1 = 64'd56;
    end else if ((1'b1 == ap_CS_fsm_state28)) begin
        new_patch_address1 = 64'd54;
    end else if ((1'b1 == ap_CS_fsm_state27)) begin
        new_patch_address1 = 64'd52;
    end else if ((1'b1 == ap_CS_fsm_state26)) begin
        new_patch_address1 = 64'd50;
    end else if ((1'b1 == ap_CS_fsm_state25)) begin
        new_patch_address1 = 64'd48;
    end else if ((1'b1 == ap_CS_fsm_state24)) begin
        new_patch_address1 = 64'd46;
    end else if ((1'b1 == ap_CS_fsm_state23)) begin
        new_patch_address1 = 64'd44;
    end else if ((1'b1 == ap_CS_fsm_state22)) begin
        new_patch_address1 = 64'd42;
    end else if ((1'b1 == ap_CS_fsm_state21)) begin
        new_patch_address1 = 64'd40;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        new_patch_address1 = 64'd38;
    end else if ((1'b1 == ap_CS_fsm_state19)) begin
        new_patch_address1 = 64'd36;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        new_patch_address1 = 64'd34;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        new_patch_address1 = 64'd32;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        new_patch_address1 = 64'd30;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        new_patch_address1 = 64'd28;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        new_patch_address1 = 64'd26;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        new_patch_address1 = 64'd24;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        new_patch_address1 = 64'd22;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        new_patch_address1 = 64'd20;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        new_patch_address1 = 64'd18;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        new_patch_address1 = 64'd16;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        new_patch_address1 = 64'd14;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        new_patch_address1 = 64'd12;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        new_patch_address1 = 64'd10;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        new_patch_address1 = 64'd8;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        new_patch_address1 = 64'd6;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        new_patch_address1 = 64'd4;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        new_patch_address1 = 64'd2;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        new_patch_address1 = 64'd0;
    end else begin
        new_patch_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state40) | (1'b1 == ap_CS_fsm_state39) | (1'b1 == ap_CS_fsm_state38) | (1'b1 == ap_CS_fsm_state37) | (1'b1 == ap_CS_fsm_state36) | (1'b1 == ap_CS_fsm_state35) | (1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
        new_patch_ce0 = 1'b1;
    end else begin
        new_patch_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state40) | (1'b1 == ap_CS_fsm_state39) | (1'b1 == ap_CS_fsm_state38) | (1'b1 == ap_CS_fsm_state37) | (1'b1 == ap_CS_fsm_state36) | (1'b1 == ap_CS_fsm_state35) | (1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
        new_patch_ce1 = 1'b1;
    end else begin
        new_patch_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        num_patches_constprop_o = add_ln16_fu_2187_p2;
    end else begin
        num_patches_constprop_o = num_patches_constprop_i;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        num_patches_constprop_o_ap_vld = 1'b1;
    end else begin
        num_patches_constprop_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        patch_buffer_0_0_ce0 = 1'b1;
    end else begin
        patch_buffer_0_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        patch_buffer_0_0_we0 = 1'b1;
    end else begin
        patch_buffer_0_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        patch_buffer_0_10_ce0 = 1'b1;
    end else begin
        patch_buffer_0_10_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        patch_buffer_0_10_we0 = 1'b1;
    end else begin
        patch_buffer_0_10_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        patch_buffer_0_11_ce0 = 1'b1;
    end else begin
        patch_buffer_0_11_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        patch_buffer_0_11_we0 = 1'b1;
    end else begin
        patch_buffer_0_11_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        patch_buffer_0_12_ce0 = 1'b1;
    end else begin
        patch_buffer_0_12_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        patch_buffer_0_12_we0 = 1'b1;
    end else begin
        patch_buffer_0_12_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        patch_buffer_0_13_ce0 = 1'b1;
    end else begin
        patch_buffer_0_13_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        patch_buffer_0_13_we0 = 1'b1;
    end else begin
        patch_buffer_0_13_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        patch_buffer_0_14_ce0 = 1'b1;
    end else begin
        patch_buffer_0_14_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        patch_buffer_0_14_we0 = 1'b1;
    end else begin
        patch_buffer_0_14_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        patch_buffer_0_15_ce0 = 1'b1;
    end else begin
        patch_buffer_0_15_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        patch_buffer_0_15_we0 = 1'b1;
    end else begin
        patch_buffer_0_15_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        patch_buffer_0_1_ce0 = 1'b1;
    end else begin
        patch_buffer_0_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        patch_buffer_0_1_we0 = 1'b1;
    end else begin
        patch_buffer_0_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        patch_buffer_0_2_ce0 = 1'b1;
    end else begin
        patch_buffer_0_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        patch_buffer_0_2_we0 = 1'b1;
    end else begin
        patch_buffer_0_2_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        patch_buffer_0_3_ce0 = 1'b1;
    end else begin
        patch_buffer_0_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        patch_buffer_0_3_we0 = 1'b1;
    end else begin
        patch_buffer_0_3_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        patch_buffer_0_4_ce0 = 1'b1;
    end else begin
        patch_buffer_0_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        patch_buffer_0_4_we0 = 1'b1;
    end else begin
        patch_buffer_0_4_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        patch_buffer_0_5_ce0 = 1'b1;
    end else begin
        patch_buffer_0_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        patch_buffer_0_5_we0 = 1'b1;
    end else begin
        patch_buffer_0_5_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        patch_buffer_0_6_ce0 = 1'b1;
    end else begin
        patch_buffer_0_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        patch_buffer_0_6_we0 = 1'b1;
    end else begin
        patch_buffer_0_6_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        patch_buffer_0_7_ce0 = 1'b1;
    end else begin
        patch_buffer_0_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        patch_buffer_0_7_we0 = 1'b1;
    end else begin
        patch_buffer_0_7_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        patch_buffer_0_8_ce0 = 1'b1;
    end else begin
        patch_buffer_0_8_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        patch_buffer_0_8_we0 = 1'b1;
    end else begin
        patch_buffer_0_8_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        patch_buffer_0_9_ce0 = 1'b1;
    end else begin
        patch_buffer_0_9_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        patch_buffer_0_9_we0 = 1'b1;
    end else begin
        patch_buffer_0_9_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        patch_buffer_1_0_ce0 = 1'b1;
    end else begin
        patch_buffer_1_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        patch_buffer_1_0_we0 = 1'b1;
    end else begin
        patch_buffer_1_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        patch_buffer_1_10_ce0 = 1'b1;
    end else begin
        patch_buffer_1_10_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        patch_buffer_1_10_we0 = 1'b1;
    end else begin
        patch_buffer_1_10_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        patch_buffer_1_11_ce0 = 1'b1;
    end else begin
        patch_buffer_1_11_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        patch_buffer_1_11_we0 = 1'b1;
    end else begin
        patch_buffer_1_11_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        patch_buffer_1_12_ce0 = 1'b1;
    end else begin
        patch_buffer_1_12_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        patch_buffer_1_12_we0 = 1'b1;
    end else begin
        patch_buffer_1_12_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        patch_buffer_1_13_ce0 = 1'b1;
    end else begin
        patch_buffer_1_13_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        patch_buffer_1_13_we0 = 1'b1;
    end else begin
        patch_buffer_1_13_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        patch_buffer_1_14_ce0 = 1'b1;
    end else begin
        patch_buffer_1_14_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        patch_buffer_1_14_we0 = 1'b1;
    end else begin
        patch_buffer_1_14_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        patch_buffer_1_15_ce0 = 1'b1;
    end else begin
        patch_buffer_1_15_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        patch_buffer_1_15_we0 = 1'b1;
    end else begin
        patch_buffer_1_15_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        patch_buffer_1_1_ce0 = 1'b1;
    end else begin
        patch_buffer_1_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        patch_buffer_1_1_we0 = 1'b1;
    end else begin
        patch_buffer_1_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        patch_buffer_1_2_ce0 = 1'b1;
    end else begin
        patch_buffer_1_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        patch_buffer_1_2_we0 = 1'b1;
    end else begin
        patch_buffer_1_2_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        patch_buffer_1_3_ce0 = 1'b1;
    end else begin
        patch_buffer_1_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        patch_buffer_1_3_we0 = 1'b1;
    end else begin
        patch_buffer_1_3_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        patch_buffer_1_4_ce0 = 1'b1;
    end else begin
        patch_buffer_1_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        patch_buffer_1_4_we0 = 1'b1;
    end else begin
        patch_buffer_1_4_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        patch_buffer_1_5_ce0 = 1'b1;
    end else begin
        patch_buffer_1_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        patch_buffer_1_5_we0 = 1'b1;
    end else begin
        patch_buffer_1_5_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        patch_buffer_1_6_ce0 = 1'b1;
    end else begin
        patch_buffer_1_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        patch_buffer_1_6_we0 = 1'b1;
    end else begin
        patch_buffer_1_6_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        patch_buffer_1_7_ce0 = 1'b1;
    end else begin
        patch_buffer_1_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        patch_buffer_1_7_we0 = 1'b1;
    end else begin
        patch_buffer_1_7_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        patch_buffer_1_8_ce0 = 1'b1;
    end else begin
        patch_buffer_1_8_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        patch_buffer_1_8_we0 = 1'b1;
    end else begin
        patch_buffer_1_8_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        patch_buffer_1_9_ce0 = 1'b1;
    end else begin
        patch_buffer_1_9_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        patch_buffer_1_9_we0 = 1'b1;
    end else begin
        patch_buffer_1_9_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        patch_buffer_2_0_ce0 = 1'b1;
    end else begin
        patch_buffer_2_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        patch_buffer_2_0_we0 = 1'b1;
    end else begin
        patch_buffer_2_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state23)) begin
        patch_buffer_2_10_ce0 = 1'b1;
    end else begin
        patch_buffer_2_10_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state23)) begin
        patch_buffer_2_10_we0 = 1'b1;
    end else begin
        patch_buffer_2_10_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state23)) begin
        patch_buffer_2_11_ce0 = 1'b1;
    end else begin
        patch_buffer_2_11_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state23)) begin
        patch_buffer_2_11_we0 = 1'b1;
    end else begin
        patch_buffer_2_11_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state24)) begin
        patch_buffer_2_12_ce0 = 1'b1;
    end else begin
        patch_buffer_2_12_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state24)) begin
        patch_buffer_2_12_we0 = 1'b1;
    end else begin
        patch_buffer_2_12_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state24)) begin
        patch_buffer_2_13_ce0 = 1'b1;
    end else begin
        patch_buffer_2_13_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state24)) begin
        patch_buffer_2_13_we0 = 1'b1;
    end else begin
        patch_buffer_2_13_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state25)) begin
        patch_buffer_2_14_ce0 = 1'b1;
    end else begin
        patch_buffer_2_14_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state25)) begin
        patch_buffer_2_14_we0 = 1'b1;
    end else begin
        patch_buffer_2_14_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state25)) begin
        patch_buffer_2_15_ce0 = 1'b1;
    end else begin
        patch_buffer_2_15_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state25)) begin
        patch_buffer_2_15_we0 = 1'b1;
    end else begin
        patch_buffer_2_15_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        patch_buffer_2_1_ce0 = 1'b1;
    end else begin
        patch_buffer_2_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        patch_buffer_2_1_we0 = 1'b1;
    end else begin
        patch_buffer_2_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        patch_buffer_2_2_ce0 = 1'b1;
    end else begin
        patch_buffer_2_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        patch_buffer_2_2_we0 = 1'b1;
    end else begin
        patch_buffer_2_2_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        patch_buffer_2_3_ce0 = 1'b1;
    end else begin
        patch_buffer_2_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        patch_buffer_2_3_we0 = 1'b1;
    end else begin
        patch_buffer_2_3_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        patch_buffer_2_4_ce0 = 1'b1;
    end else begin
        patch_buffer_2_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        patch_buffer_2_4_we0 = 1'b1;
    end else begin
        patch_buffer_2_4_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        patch_buffer_2_5_ce0 = 1'b1;
    end else begin
        patch_buffer_2_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        patch_buffer_2_5_we0 = 1'b1;
    end else begin
        patch_buffer_2_5_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state21)) begin
        patch_buffer_2_6_ce0 = 1'b1;
    end else begin
        patch_buffer_2_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state21)) begin
        patch_buffer_2_6_we0 = 1'b1;
    end else begin
        patch_buffer_2_6_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state21)) begin
        patch_buffer_2_7_ce0 = 1'b1;
    end else begin
        patch_buffer_2_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state21)) begin
        patch_buffer_2_7_we0 = 1'b1;
    end else begin
        patch_buffer_2_7_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        patch_buffer_2_8_ce0 = 1'b1;
    end else begin
        patch_buffer_2_8_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        patch_buffer_2_8_we0 = 1'b1;
    end else begin
        patch_buffer_2_8_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        patch_buffer_2_9_ce0 = 1'b1;
    end else begin
        patch_buffer_2_9_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        patch_buffer_2_9_we0 = 1'b1;
    end else begin
        patch_buffer_2_9_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state26)) begin
        patch_buffer_3_0_ce0 = 1'b1;
    end else begin
        patch_buffer_3_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state26)) begin
        patch_buffer_3_0_we0 = 1'b1;
    end else begin
        patch_buffer_3_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state31)) begin
        patch_buffer_3_10_ce0 = 1'b1;
    end else begin
        patch_buffer_3_10_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state31)) begin
        patch_buffer_3_10_we0 = 1'b1;
    end else begin
        patch_buffer_3_10_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state31)) begin
        patch_buffer_3_11_ce0 = 1'b1;
    end else begin
        patch_buffer_3_11_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state31)) begin
        patch_buffer_3_11_we0 = 1'b1;
    end else begin
        patch_buffer_3_11_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state32)) begin
        patch_buffer_3_12_ce0 = 1'b1;
    end else begin
        patch_buffer_3_12_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state32)) begin
        patch_buffer_3_12_we0 = 1'b1;
    end else begin
        patch_buffer_3_12_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state32)) begin
        patch_buffer_3_13_ce0 = 1'b1;
    end else begin
        patch_buffer_3_13_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state32)) begin
        patch_buffer_3_13_we0 = 1'b1;
    end else begin
        patch_buffer_3_13_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state33)) begin
        patch_buffer_3_14_ce0 = 1'b1;
    end else begin
        patch_buffer_3_14_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state33)) begin
        patch_buffer_3_14_we0 = 1'b1;
    end else begin
        patch_buffer_3_14_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state33)) begin
        patch_buffer_3_15_ce0 = 1'b1;
    end else begin
        patch_buffer_3_15_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state33)) begin
        patch_buffer_3_15_we0 = 1'b1;
    end else begin
        patch_buffer_3_15_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state26)) begin
        patch_buffer_3_1_ce0 = 1'b1;
    end else begin
        patch_buffer_3_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state26)) begin
        patch_buffer_3_1_we0 = 1'b1;
    end else begin
        patch_buffer_3_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state27)) begin
        patch_buffer_3_2_ce0 = 1'b1;
    end else begin
        patch_buffer_3_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state27)) begin
        patch_buffer_3_2_we0 = 1'b1;
    end else begin
        patch_buffer_3_2_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state27)) begin
        patch_buffer_3_3_ce0 = 1'b1;
    end else begin
        patch_buffer_3_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state27)) begin
        patch_buffer_3_3_we0 = 1'b1;
    end else begin
        patch_buffer_3_3_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state28)) begin
        patch_buffer_3_4_ce0 = 1'b1;
    end else begin
        patch_buffer_3_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state28)) begin
        patch_buffer_3_4_we0 = 1'b1;
    end else begin
        patch_buffer_3_4_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state28)) begin
        patch_buffer_3_5_ce0 = 1'b1;
    end else begin
        patch_buffer_3_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state28)) begin
        patch_buffer_3_5_we0 = 1'b1;
    end else begin
        patch_buffer_3_5_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state29)) begin
        patch_buffer_3_6_ce0 = 1'b1;
    end else begin
        patch_buffer_3_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state29)) begin
        patch_buffer_3_6_we0 = 1'b1;
    end else begin
        patch_buffer_3_6_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state29)) begin
        patch_buffer_3_7_ce0 = 1'b1;
    end else begin
        patch_buffer_3_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state29)) begin
        patch_buffer_3_7_we0 = 1'b1;
    end else begin
        patch_buffer_3_7_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state30)) begin
        patch_buffer_3_8_ce0 = 1'b1;
    end else begin
        patch_buffer_3_8_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state30)) begin
        patch_buffer_3_8_we0 = 1'b1;
    end else begin
        patch_buffer_3_8_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state30)) begin
        patch_buffer_3_9_ce0 = 1'b1;
    end else begin
        patch_buffer_3_9_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state30)) begin
        patch_buffer_3_9_we0 = 1'b1;
    end else begin
        patch_buffer_3_9_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state34)) begin
        patch_buffer_4_0_ce0 = 1'b1;
    end else begin
        patch_buffer_4_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state34)) begin
        patch_buffer_4_0_we0 = 1'b1;
    end else begin
        patch_buffer_4_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state39)) begin
        patch_buffer_4_10_ce0 = 1'b1;
    end else begin
        patch_buffer_4_10_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state39)) begin
        patch_buffer_4_10_we0 = 1'b1;
    end else begin
        patch_buffer_4_10_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state39)) begin
        patch_buffer_4_11_ce0 = 1'b1;
    end else begin
        patch_buffer_4_11_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state39)) begin
        patch_buffer_4_11_we0 = 1'b1;
    end else begin
        patch_buffer_4_11_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state40)) begin
        patch_buffer_4_12_ce0 = 1'b1;
    end else begin
        patch_buffer_4_12_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state40)) begin
        patch_buffer_4_12_we0 = 1'b1;
    end else begin
        patch_buffer_4_12_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state40)) begin
        patch_buffer_4_13_ce0 = 1'b1;
    end else begin
        patch_buffer_4_13_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state40)) begin
        patch_buffer_4_13_we0 = 1'b1;
    end else begin
        patch_buffer_4_13_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state41)) begin
        patch_buffer_4_14_ce0 = 1'b1;
    end else begin
        patch_buffer_4_14_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state41)) begin
        patch_buffer_4_14_we0 = 1'b1;
    end else begin
        patch_buffer_4_14_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state41)) begin
        patch_buffer_4_15_ce0 = 1'b1;
    end else begin
        patch_buffer_4_15_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state41)) begin
        patch_buffer_4_15_we0 = 1'b1;
    end else begin
        patch_buffer_4_15_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state34)) begin
        patch_buffer_4_1_ce0 = 1'b1;
    end else begin
        patch_buffer_4_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state34)) begin
        patch_buffer_4_1_we0 = 1'b1;
    end else begin
        patch_buffer_4_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state35)) begin
        patch_buffer_4_2_ce0 = 1'b1;
    end else begin
        patch_buffer_4_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state35)) begin
        patch_buffer_4_2_we0 = 1'b1;
    end else begin
        patch_buffer_4_2_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state35)) begin
        patch_buffer_4_3_ce0 = 1'b1;
    end else begin
        patch_buffer_4_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state35)) begin
        patch_buffer_4_3_we0 = 1'b1;
    end else begin
        patch_buffer_4_3_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state36)) begin
        patch_buffer_4_4_ce0 = 1'b1;
    end else begin
        patch_buffer_4_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state36)) begin
        patch_buffer_4_4_we0 = 1'b1;
    end else begin
        patch_buffer_4_4_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state36)) begin
        patch_buffer_4_5_ce0 = 1'b1;
    end else begin
        patch_buffer_4_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state36)) begin
        patch_buffer_4_5_we0 = 1'b1;
    end else begin
        patch_buffer_4_5_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state37)) begin
        patch_buffer_4_6_ce0 = 1'b1;
    end else begin
        patch_buffer_4_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state37)) begin
        patch_buffer_4_6_we0 = 1'b1;
    end else begin
        patch_buffer_4_6_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state37)) begin
        patch_buffer_4_7_ce0 = 1'b1;
    end else begin
        patch_buffer_4_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state37)) begin
        patch_buffer_4_7_we0 = 1'b1;
    end else begin
        patch_buffer_4_7_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state38)) begin
        patch_buffer_4_8_ce0 = 1'b1;
    end else begin
        patch_buffer_4_8_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state38)) begin
        patch_buffer_4_8_we0 = 1'b1;
    end else begin
        patch_buffer_4_8_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state38)) begin
        patch_buffer_4_9_ce0 = 1'b1;
    end else begin
        patch_buffer_4_9_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state38)) begin
        patch_buffer_4_9_we0 = 1'b1;
    end else begin
        patch_buffer_4_9_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln15_fu_2207_p2 = (zext_ln15_fu_2203_p1 + 3'd1);

assign add_ln16_fu_2187_p2 = (num_patches_constprop_i + 32'd1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state25 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_state26 = ap_CS_fsm[32'd25];

assign ap_CS_fsm_state27 = ap_CS_fsm[32'd26];

assign ap_CS_fsm_state28 = ap_CS_fsm[32'd27];

assign ap_CS_fsm_state29 = ap_CS_fsm[32'd28];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state30 = ap_CS_fsm[32'd29];

assign ap_CS_fsm_state31 = ap_CS_fsm[32'd30];

assign ap_CS_fsm_state32 = ap_CS_fsm[32'd31];

assign ap_CS_fsm_state33 = ap_CS_fsm[32'd32];

assign ap_CS_fsm_state34 = ap_CS_fsm[32'd33];

assign ap_CS_fsm_state35 = ap_CS_fsm[32'd34];

assign ap_CS_fsm_state36 = ap_CS_fsm[32'd35];

assign ap_CS_fsm_state37 = ap_CS_fsm[32'd36];

assign ap_CS_fsm_state38 = ap_CS_fsm[32'd37];

assign ap_CS_fsm_state39 = ap_CS_fsm[32'd38];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state40 = ap_CS_fsm[32'd39];

assign ap_CS_fsm_state41 = ap_CS_fsm[32'd40];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign icmp_ln15_fu_2217_p2 = ((add_ln15_fu_2207_p2 < 3'd3) ? 1'b1 : 1'b0);

assign idxprom4_fu_2243_p1 = select_ln15_fu_2229_p3;

assign patch_buffer_0_0_address0 = idxprom4_fu_2243_p1;

assign patch_buffer_0_0_d0 = new_patch_q1;

assign patch_buffer_0_10_address0 = idxprom4_reg_2269;

assign patch_buffer_0_10_d0 = new_patch_q1;

assign patch_buffer_0_11_address0 = idxprom4_reg_2269;

assign patch_buffer_0_11_d0 = new_patch_q0;

assign patch_buffer_0_12_address0 = idxprom4_reg_2269;

assign patch_buffer_0_12_d0 = new_patch_q1;

assign patch_buffer_0_13_address0 = idxprom4_reg_2269;

assign patch_buffer_0_13_d0 = new_patch_q0;

assign patch_buffer_0_14_address0 = idxprom4_reg_2269;

assign patch_buffer_0_14_d0 = new_patch_q1;

assign patch_buffer_0_15_address0 = idxprom4_reg_2269;

assign patch_buffer_0_15_d0 = new_patch_q0;

assign patch_buffer_0_1_address0 = idxprom4_fu_2243_p1;

assign patch_buffer_0_1_d0 = new_patch_q0;

assign patch_buffer_0_2_address0 = idxprom4_reg_2269;

assign patch_buffer_0_2_d0 = new_patch_q1;

assign patch_buffer_0_3_address0 = idxprom4_reg_2269;

assign patch_buffer_0_3_d0 = new_patch_q0;

assign patch_buffer_0_4_address0 = idxprom4_reg_2269;

assign patch_buffer_0_4_d0 = new_patch_q1;

assign patch_buffer_0_5_address0 = idxprom4_reg_2269;

assign patch_buffer_0_5_d0 = new_patch_q0;

assign patch_buffer_0_6_address0 = idxprom4_reg_2269;

assign patch_buffer_0_6_d0 = new_patch_q1;

assign patch_buffer_0_7_address0 = idxprom4_reg_2269;

assign patch_buffer_0_7_d0 = new_patch_q0;

assign patch_buffer_0_8_address0 = idxprom4_reg_2269;

assign patch_buffer_0_8_d0 = new_patch_q1;

assign patch_buffer_0_9_address0 = idxprom4_reg_2269;

assign patch_buffer_0_9_d0 = new_patch_q0;

assign patch_buffer_1_0_address0 = idxprom4_reg_2269;

assign patch_buffer_1_0_d0 = new_patch_q1;

assign patch_buffer_1_10_address0 = idxprom4_reg_2269;

assign patch_buffer_1_10_d0 = new_patch_q1;

assign patch_buffer_1_11_address0 = idxprom4_reg_2269;

assign patch_buffer_1_11_d0 = new_patch_q0;

assign patch_buffer_1_12_address0 = idxprom4_reg_2269;

assign patch_buffer_1_12_d0 = new_patch_q1;

assign patch_buffer_1_13_address0 = idxprom4_reg_2269;

assign patch_buffer_1_13_d0 = new_patch_q0;

assign patch_buffer_1_14_address0 = idxprom4_reg_2269;

assign patch_buffer_1_14_d0 = new_patch_q1;

assign patch_buffer_1_15_address0 = idxprom4_reg_2269;

assign patch_buffer_1_15_d0 = new_patch_q0;

assign patch_buffer_1_1_address0 = idxprom4_reg_2269;

assign patch_buffer_1_1_d0 = new_patch_q0;

assign patch_buffer_1_2_address0 = idxprom4_reg_2269;

assign patch_buffer_1_2_d0 = new_patch_q1;

assign patch_buffer_1_3_address0 = idxprom4_reg_2269;

assign patch_buffer_1_3_d0 = new_patch_q0;

assign patch_buffer_1_4_address0 = idxprom4_reg_2269;

assign patch_buffer_1_4_d0 = new_patch_q1;

assign patch_buffer_1_5_address0 = idxprom4_reg_2269;

assign patch_buffer_1_5_d0 = new_patch_q0;

assign patch_buffer_1_6_address0 = idxprom4_reg_2269;

assign patch_buffer_1_6_d0 = new_patch_q1;

assign patch_buffer_1_7_address0 = idxprom4_reg_2269;

assign patch_buffer_1_7_d0 = new_patch_q0;

assign patch_buffer_1_8_address0 = idxprom4_reg_2269;

assign patch_buffer_1_8_d0 = new_patch_q1;

assign patch_buffer_1_9_address0 = idxprom4_reg_2269;

assign patch_buffer_1_9_d0 = new_patch_q0;

assign patch_buffer_2_0_address0 = idxprom4_reg_2269;

assign patch_buffer_2_0_d0 = new_patch_q1;

assign patch_buffer_2_10_address0 = idxprom4_reg_2269;

assign patch_buffer_2_10_d0 = new_patch_q1;

assign patch_buffer_2_11_address0 = idxprom4_reg_2269;

assign patch_buffer_2_11_d0 = new_patch_q0;

assign patch_buffer_2_12_address0 = idxprom4_reg_2269;

assign patch_buffer_2_12_d0 = new_patch_q1;

assign patch_buffer_2_13_address0 = idxprom4_reg_2269;

assign patch_buffer_2_13_d0 = new_patch_q0;

assign patch_buffer_2_14_address0 = idxprom4_reg_2269;

assign patch_buffer_2_14_d0 = new_patch_q1;

assign patch_buffer_2_15_address0 = idxprom4_reg_2269;

assign patch_buffer_2_15_d0 = new_patch_q0;

assign patch_buffer_2_1_address0 = idxprom4_reg_2269;

assign patch_buffer_2_1_d0 = new_patch_q0;

assign patch_buffer_2_2_address0 = idxprom4_reg_2269;

assign patch_buffer_2_2_d0 = new_patch_q1;

assign patch_buffer_2_3_address0 = idxprom4_reg_2269;

assign patch_buffer_2_3_d0 = new_patch_q0;

assign patch_buffer_2_4_address0 = idxprom4_reg_2269;

assign patch_buffer_2_4_d0 = new_patch_q1;

assign patch_buffer_2_5_address0 = idxprom4_reg_2269;

assign patch_buffer_2_5_d0 = new_patch_q0;

assign patch_buffer_2_6_address0 = idxprom4_reg_2269;

assign patch_buffer_2_6_d0 = new_patch_q1;

assign patch_buffer_2_7_address0 = idxprom4_reg_2269;

assign patch_buffer_2_7_d0 = new_patch_q0;

assign patch_buffer_2_8_address0 = idxprom4_reg_2269;

assign patch_buffer_2_8_d0 = new_patch_q1;

assign patch_buffer_2_9_address0 = idxprom4_reg_2269;

assign patch_buffer_2_9_d0 = new_patch_q0;

assign patch_buffer_3_0_address0 = idxprom4_reg_2269;

assign patch_buffer_3_0_d0 = new_patch_q1;

assign patch_buffer_3_10_address0 = idxprom4_reg_2269;

assign patch_buffer_3_10_d0 = new_patch_q1;

assign patch_buffer_3_11_address0 = idxprom4_reg_2269;

assign patch_buffer_3_11_d0 = new_patch_q0;

assign patch_buffer_3_12_address0 = idxprom4_reg_2269;

assign patch_buffer_3_12_d0 = new_patch_q1;

assign patch_buffer_3_13_address0 = idxprom4_reg_2269;

assign patch_buffer_3_13_d0 = new_patch_q0;

assign patch_buffer_3_14_address0 = idxprom4_reg_2269;

assign patch_buffer_3_14_d0 = new_patch_q1;

assign patch_buffer_3_15_address0 = idxprom4_reg_2269;

assign patch_buffer_3_15_d0 = new_patch_q0;

assign patch_buffer_3_1_address0 = idxprom4_reg_2269;

assign patch_buffer_3_1_d0 = new_patch_q0;

assign patch_buffer_3_2_address0 = idxprom4_reg_2269;

assign patch_buffer_3_2_d0 = new_patch_q1;

assign patch_buffer_3_3_address0 = idxprom4_reg_2269;

assign patch_buffer_3_3_d0 = new_patch_q0;

assign patch_buffer_3_4_address0 = idxprom4_reg_2269;

assign patch_buffer_3_4_d0 = new_patch_q1;

assign patch_buffer_3_5_address0 = idxprom4_reg_2269;

assign patch_buffer_3_5_d0 = new_patch_q0;

assign patch_buffer_3_6_address0 = idxprom4_reg_2269;

assign patch_buffer_3_6_d0 = new_patch_q1;

assign patch_buffer_3_7_address0 = idxprom4_reg_2269;

assign patch_buffer_3_7_d0 = new_patch_q0;

assign patch_buffer_3_8_address0 = idxprom4_reg_2269;

assign patch_buffer_3_8_d0 = new_patch_q1;

assign patch_buffer_3_9_address0 = idxprom4_reg_2269;

assign patch_buffer_3_9_d0 = new_patch_q0;

assign patch_buffer_4_0_address0 = idxprom4_reg_2269;

assign patch_buffer_4_0_d0 = new_patch_q1;

assign patch_buffer_4_10_address0 = idxprom4_reg_2269;

assign patch_buffer_4_10_d0 = new_patch_q1;

assign patch_buffer_4_11_address0 = idxprom4_reg_2269;

assign patch_buffer_4_11_d0 = new_patch_q0;

assign patch_buffer_4_12_address0 = idxprom4_reg_2269;

assign patch_buffer_4_12_d0 = new_patch_q1;

assign patch_buffer_4_13_address0 = idxprom4_reg_2269;

assign patch_buffer_4_13_d0 = new_patch_q0;

assign patch_buffer_4_14_address0 = idxprom4_reg_2269;

assign patch_buffer_4_14_d0 = new_patch_q1;

assign patch_buffer_4_15_address0 = idxprom4_reg_2269;

assign patch_buffer_4_15_d0 = new_patch_q0;

assign patch_buffer_4_1_address0 = idxprom4_reg_2269;

assign patch_buffer_4_1_d0 = new_patch_q0;

assign patch_buffer_4_2_address0 = idxprom4_reg_2269;

assign patch_buffer_4_2_d0 = new_patch_q1;

assign patch_buffer_4_3_address0 = idxprom4_reg_2269;

assign patch_buffer_4_3_d0 = new_patch_q0;

assign patch_buffer_4_4_address0 = idxprom4_reg_2269;

assign patch_buffer_4_4_d0 = new_patch_q1;

assign patch_buffer_4_5_address0 = idxprom4_reg_2269;

assign patch_buffer_4_5_d0 = new_patch_q0;

assign patch_buffer_4_6_address0 = idxprom4_reg_2269;

assign patch_buffer_4_6_d0 = new_patch_q1;

assign patch_buffer_4_7_address0 = idxprom4_reg_2269;

assign patch_buffer_4_7_d0 = new_patch_q0;

assign patch_buffer_4_8_address0 = idxprom4_reg_2269;

assign patch_buffer_4_8_d0 = new_patch_q1;

assign patch_buffer_4_9_address0 = idxprom4_reg_2269;

assign patch_buffer_4_9_d0 = new_patch_q0;

assign select_ln15_fu_2229_p3 = ((icmp_ln15_fu_2217_p2[0:0] == 1'b1) ? trunc_ln15_fu_2213_p1 : xor_ln15_fu_2223_p2);

assign trunc_ln15_fu_2213_p1 = add_ln15_fu_2207_p2[1:0];

assign xor_ln15_fu_2223_p2 = (latest_patch_index_constprop_i ^ 2'd2);

assign zext_ln15_fu_2203_p1 = latest_patch_index_constprop_i;

always @ (posedge ap_clk) begin
    idxprom4_reg_2269[63:2] <= 62'b00000000000000000000000000000000000000000000000000000000000000;
end

endmodule //system_top_patch_buffer_add_patch
