-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Version: 2020.2
-- Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity system_top_p_find_starting_index_and_value5 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    num_points_address1 : OUT STD_LOGIC_VECTOR (2 downto 0);
    num_points_ce1 : OUT STD_LOGIC;
    num_points_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    points_address1 : OUT STD_LOGIC_VECTOR (11 downto 0);
    points_ce1 : OUT STD_LOGIC;
    points_q1 : IN STD_LOGIC_VECTOR (127 downto 0);
    projectionToRow_dout : IN STD_LOGIC_VECTOR (25 downto 0);
    projectionToRow_empty_n : IN STD_LOGIC;
    projectionToRow_read : OUT STD_LOGIC;
    start_index : OUT STD_LOGIC_VECTOR (31 downto 0);
    start_index_ap_vld : OUT STD_LOGIC;
    start_value_i : IN STD_LOGIC_VECTOR (31 downto 0);
    start_value_o : OUT STD_LOGIC_VECTOR (31 downto 0);
    start_value_o_ap_vld : OUT STD_LOGIC;
    i_dout : IN STD_LOGIC_VECTOR (2 downto 0);
    i_empty_n : IN STD_LOGIC;
    i_read : OUT STD_LOGIC );
end;


architecture behav of system_top_p_find_starting_index_and_value5 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (5 downto 0) := "000010";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (5 downto 0) := "000100";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (5 downto 0) := "001000";
    constant ap_ST_fsm_pp0_stage2 : STD_LOGIC_VECTOR (5 downto 0) := "010000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv26_0 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000000000000";
    constant ap_const_lv13_0 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_FFFFFFE8 : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111101000";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv6_39 : STD_LOGIC_VECTOR (5 downto 0) := "111001";
    constant ap_const_lv32_FFFFFFFF : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111111";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_FFFFFFE7 : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111100111";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv8_7F : STD_LOGIC_VECTOR (7 downto 0) := "01111111";
    constant ap_const_lv8_7E : STD_LOGIC_VECTOR (7 downto 0) := "01111110";
    constant ap_const_lv8_C : STD_LOGIC_VECTOR (7 downto 0) := "00001100";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv5_4 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";

attribute shreg_extract : string;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal projectionToRow_blk_n : STD_LOGIC;
    signal i_blk_n : STD_LOGIC;
    signal j_reg_204 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_reg_204_pp0_iter1_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state3_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal j_reg_204_pp0_iter2_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_s_reg_1304 : STD_LOGIC_VECTOR (25 downto 0);
    signal i_1_reg_1312 : STD_LOGIC_VECTOR (2 downto 0);
    signal projectionToRow_cast1_i_fu_230_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal projectionToRow_cast1_i_reg_1322 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal num_points_load_reg_1330 : STD_LOGIC_VECTOR (31 downto 0);
    signal tobool_i19_i_fu_233_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tobool_i19_i_reg_1335 : STD_LOGIC_VECTOR (0 downto 0);
    signal m_10_cast_i_fu_238_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal m_10_cast_i_reg_1340 : STD_LOGIC_VECTOR (63 downto 0);
    signal shl_ln_fu_241_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal shl_ln_reg_1346 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln193_fu_248_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln193_reg_1351 : STD_LOGIC_VECTOR (0 downto 0);
    signal LD_1_fu_579_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal LD_1_reg_1360 : STD_LOGIC_VECTOR (31 downto 0);
    signal z_bits_fu_583_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal z_bits_reg_1365 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_state4_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_state7_pp0_stage1_iter1 : BOOLEAN;
    signal ap_block_state10_pp0_stage1_iter2 : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal z_bits_reg_1365_pp0_iter1_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_21_fu_587_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_21_reg_1371 : STD_LOGIC_VECTOR (0 downto 0);
    signal m_19_fu_601_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal m_19_reg_1376 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln944_fu_627_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln944_reg_1381 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln958_fu_721_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln958_reg_1387 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln958_fu_741_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln958_reg_1392 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln943_fu_749_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln943_reg_1397 : STD_LOGIC_VECTOR (7 downto 0);
    signal retval_0_i81_i_fu_756_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal retval_0_i81_i_reg_1402 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln193_fu_763_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln193_reg_1407 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage2 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal ap_block_state5_pp0_stage2_iter0 : BOOLEAN;
    signal ap_block_state8_pp0_stage2_iter1 : BOOLEAN;
    signal ap_block_pp0_stage2_11001 : BOOLEAN;
    signal select_ln935_fu_891_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln935_reg_1412 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_217_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal dc_reg_1417 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln935_1_fu_899_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln935_1_reg_1422 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_29_fu_905_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_29_reg_1427 : STD_LOGIC_VECTOR (0 downto 0);
    signal m_23_reg_1432 : STD_LOGIC_VECTOR (62 downto 0);
    signal p_Result_18_reg_1437 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln943_2_fu_1139_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln943_2_reg_1442 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln195_fu_1255_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln195_reg_1457 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln195_1_fu_1261_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln195_1_reg_1462 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln195_2_fu_1267_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln195_2_reg_1467 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln195_3_fu_1273_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln195_3_reg_1472 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_pp0_stage2_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state5 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_phi_mux_j_phi_fu_209_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal idxprom_i_fu_225_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln194_fu_292_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal start_index_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_block_pp0_stage1_01001 : BOOLEAN;
    signal and_ln195_1_fu_1293_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln703_fu_1299_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal start_value_o_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal grp_fu_221_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_221_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln194_fu_253_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal shl_ln194_1_fu_257_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln194_fu_265_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal lshr_ln_fu_270_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln194_1_fu_280_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_s_fu_284_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_Result_25_fu_297_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal l_1_fu_306_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln944_1_fu_314_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal lsb_index_1_fu_320_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_44_fu_326_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal trunc_ln947_1_fu_342_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal sub_ln947_1_fu_346_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln947_1_fu_352_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal lshr_ln947_1_fu_356_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln949_1_fu_367_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln949_fu_373_p1 : STD_LOGIC_VECTOR (25 downto 0);
    signal p_Result_10_fu_362_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln949_1_fu_382_p1 : STD_LOGIC_VECTOR (25 downto 0);
    signal and_ln949_1_fu_377_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal tmp_fu_392_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal or_ln949_3_fu_386_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal or_ln949_1_fu_402_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_45_fu_416_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_26_fu_430_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln949_1_fu_424_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln959_1_fu_449_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln959_2_fu_455_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln946_1_fu_336_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln949_1_fu_410_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln958_1_fu_472_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln958_1_fu_478_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln958_1_fu_437_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln946_1_fu_464_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln949_3_fu_443_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal lshr_ln958_1_fu_482_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal shl_ln959_1_fu_459_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal select_ln958_2_fu_487_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal m_12_fu_495_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln961_1_fu_503_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal m_13_fu_507_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal m_21_fu_513_p4 : STD_LOGIC_VECTOR (62 downto 0);
    signal p_Result_12_fu_527_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln943_1_fu_543_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal sub_ln964_1_fu_547_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln943_1_fu_535_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln964_1_fu_553_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln962_1_fu_523_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_3_i_fu_559_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_Result_27_fu_567_p5 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal tmp_V_fu_595_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_22_fu_609_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal l_fu_619_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal lsb_index_fu_633_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_41_fu_639_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal trunc_ln947_fu_655_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal sub_ln947_fu_659_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln947_fu_665_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal lshr_ln947_fu_669_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln949_fu_675_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln949_4_fu_681_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal and_ln949_fu_687_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_42_fu_699_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_23_fu_713_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln949_fu_707_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln946_fu_649_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln949_fu_693_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln946_fu_733_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln949_2_fu_727_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal bitcast_ln744_1_fu_753_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage2 : BOOLEAN;
    signal sub_ln959_fu_777_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln959_fu_774_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln959_1_fu_782_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln958_fu_792_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln958_fu_797_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal lshr_ln958_fu_801_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal shl_ln959_fu_786_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal m_fu_807_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln961_fu_814_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal m_8_fu_817_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal m_20_fu_823_p4 : STD_LOGIC_VECTOR (62 downto 0);
    signal p_Result_s_fu_837_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln964_fu_853_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln943_fu_845_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln964_fu_858_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln962_fu_833_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_i_fu_864_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_Result_24_fu_871_p5 : STD_LOGIC_VECTOR (63 downto 0);
    signal LD_fu_883_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln935_fu_769_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal bitcast_ln744_fu_887_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_V_4_fu_913_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal m_22_fu_919_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_30_fu_927_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal l_2_fu_937_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln944_2_fu_945_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal lsb_index_2_fu_951_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_48_fu_957_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal trunc_ln947_2_fu_973_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal sub_ln947_2_fu_977_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln947_2_fu_983_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal lshr_ln947_2_fu_987_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln949_2_fu_993_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln949_fu_999_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal and_ln949_4_fu_1005_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_49_fu_1017_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_31_fu_1031_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln949_2_fu_1025_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln959_2_fu_1055_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln959_3_fu_1051_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln959_4_fu_1061_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln946_2_fu_967_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln949_2_fu_1011_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln958_2_fu_1079_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln958_2_fu_1085_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln958_2_fu_1039_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln946_2_fu_1071_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln949_5_fu_1045_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal lshr_ln958_2_fu_1089_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal shl_ln959_2_fu_1065_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal select_ln958_4_fu_1095_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal m_16_fu_1103_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln961_2_fu_1111_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal m_17_fu_1115_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal data_V_fu_1143_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln368_fu_1146_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal p_Result_28_fu_1154_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln964_2_fu_1177_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln943_2_fu_1170_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln964_2_fu_1182_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln962_2_fu_1167_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_5_i_fu_1188_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_Result_32_fu_1195_p5 : STD_LOGIC_VECTOR (63 downto 0);
    signal LD_2_fu_1207_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal data_V_1_fu_1211_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal p_Result_33_fu_1222_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_5_fu_1235_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln195_fu_1150_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal tmp_6_fu_1245_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln195_1_fu_1218_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal or_ln195_fu_1279_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln195_1_fu_1283_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln195_fu_1287_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_221_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_pp0_stage0_00001 : BOOLEAN;
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component system_top_fsub_32ns_32ns_32_3_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component system_top_fcmp_32ns_32ns_1_2_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    fsub_32ns_32ns_32_3_full_dsp_1_U21 : component system_top_fsub_32ns_32ns_32_3_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => select_ln935_reg_1412,
        din1 => retval_0_i81_i_reg_1402,
        ce => ap_const_logic_1,
        dout => grp_fu_217_p2);

    fcmp_32ns_32ns_1_2_no_dsp_1_U22 : component system_top_fcmp_32ns_32ns_1_2_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_221_p0,
        din1 => grp_fu_221_p1,
        ce => ap_const_logic_1,
        opcode => ap_const_lv5_4,
        dout => grp_fu_221_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state5) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state5)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state5);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)))) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    start_index_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                start_index_preg <= ap_const_lv32_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_01001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_lv1_1 = and_ln195_1_fu_1293_p2))) then 
                    start_index_preg <= j_reg_204_pp0_iter2_reg;
                end if; 
            end if;
        end if;
    end process;


    start_value_o_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                start_value_o_preg <= ap_const_lv32_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_01001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_lv1_1 = and_ln195_1_fu_1293_p2))) then 
                    start_value_o_preg <= sub_ln703_fu_1299_p2;
                end if; 
            end if;
        end if;
    end process;


    j_reg_204_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln193_reg_1351 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                j_reg_204 <= add_ln193_reg_1407;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                j_reg_204 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln193_fu_248_p2 = ap_const_lv1_0) and (tobool_i19_i_reg_1335 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                LD_1_reg_1360 <= LD_1_fu_579_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then
                add_ln193_reg_1407 <= add_ln193_fu_763_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then
                dc_reg_1417 <= grp_fu_217_p2;
                icmp_ln935_1_reg_1422 <= icmp_ln935_1_fu_899_p2;
                m_23_reg_1432 <= m_17_fu_1115_p2(63 downto 1);
                p_Result_18_reg_1437 <= m_17_fu_1115_p2(25 downto 25);
                p_Result_29_reg_1427 <= start_value_i(31 downto 31);
                trunc_ln943_2_reg_1442 <= trunc_ln943_2_fu_1139_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                i_1_reg_1312 <= i_dout;
                p_Val2_s_reg_1304 <= projectionToRow_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln193_reg_1351 <= icmp_ln193_fu_248_p2;
                icmp_ln195_1_reg_1462 <= icmp_ln195_1_fu_1261_p2;
                icmp_ln195_2_reg_1467 <= icmp_ln195_2_fu_1267_p2;
                icmp_ln195_3_reg_1472 <= icmp_ln195_3_fu_1273_p2;
                icmp_ln195_reg_1457 <= icmp_ln195_fu_1255_p2;
                j_reg_204_pp0_iter1_reg <= j_reg_204;
                j_reg_204_pp0_iter2_reg <= j_reg_204_pp0_iter1_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln193_reg_1351 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                icmp_ln958_reg_1387 <= icmp_ln958_fu_721_p2;
                m_19_reg_1376 <= m_19_fu_601_p3;
                p_Result_21_reg_1371 <= points_q1(31 downto 31);
                retval_0_i81_i_reg_1402 <= retval_0_i81_i_fu_756_p3;
                select_ln958_reg_1392 <= select_ln958_fu_741_p3;
                sub_ln944_reg_1381 <= sub_ln944_fu_627_p2;
                trunc_ln943_reg_1397 <= trunc_ln943_fu_749_p1;
                z_bits_reg_1365 <= z_bits_fu_583_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                    m_10_cast_i_reg_1340(25 downto 0) <= m_10_cast_i_fu_238_p1(25 downto 0);
                num_points_load_reg_1330 <= num_points_q1;
                    projectionToRow_cast1_i_reg_1322(25 downto 0) <= projectionToRow_cast1_i_fu_230_p1(25 downto 0);
                    shl_ln_reg_1346(15 downto 13) <= shl_ln_fu_241_p3(15 downto 13);
                tobool_i19_i_reg_1335 <= tobool_i19_i_fu_233_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln193_reg_1351 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then
                select_ln935_reg_1412 <= select_ln935_fu_891_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                z_bits_reg_1365_pp0_iter1_reg <= z_bits_reg_1365;
            end if;
        end if;
    end process;
    projectionToRow_cast1_i_reg_1322(31 downto 26) <= "000000";
    m_10_cast_i_reg_1340(63 downto 26) <= "00000000000000000000000000000000000000";
    shl_ln_reg_1346(12 downto 0) <= "0000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, projectionToRow_empty_n, i_empty_n, icmp_ln193_reg_1351, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_block_pp0_stage2_subdone, ap_enable_reg_pp0_iter1, ap_block_pp0_stage1_subdone, ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((i_empty_n = ap_const_logic_0) or (projectionToRow_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when ap_ST_fsm_pp0_stage0 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_pp0_stage2 => 
                if ((not(((icmp_ln193_reg_1351 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp0_stage2_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((icmp_ln193_reg_1351 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                end if;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXX";
        end case;
    end process;
    LD_1_fu_579_p1 <= p_Result_27_fu_567_p5(32 - 1 downto 0);
    LD_2_fu_1207_p1 <= p_Result_32_fu_1195_p5(31 - 1 downto 0);
    LD_fu_883_p1 <= p_Result_24_fu_871_p5(32 - 1 downto 0);
    add_ln193_fu_763_p2 <= std_logic_vector(unsigned(j_reg_204) + unsigned(ap_const_lv32_1));
    add_ln194_fu_265_p2 <= std_logic_vector(unsigned(shl_ln194_1_fu_257_p3) + unsigned(shl_ln_reg_1346));
    add_ln958_1_fu_472_p2 <= std_logic_vector(unsigned(sub_ln944_1_fu_314_p2) + unsigned(ap_const_lv32_FFFFFFE7));
    add_ln958_2_fu_1079_p2 <= std_logic_vector(unsigned(sub_ln944_2_fu_945_p2) + unsigned(ap_const_lv32_FFFFFFE7));
    add_ln958_fu_792_p2 <= std_logic_vector(unsigned(sub_ln944_reg_1381) + unsigned(ap_const_lv32_FFFFFFE7));
    add_ln964_1_fu_553_p2 <= std_logic_vector(unsigned(sub_ln964_1_fu_547_p2) + unsigned(select_ln943_1_fu_535_p3));
    add_ln964_2_fu_1182_p2 <= std_logic_vector(unsigned(sub_ln964_2_fu_1177_p2) + unsigned(select_ln943_2_fu_1170_p3));
    add_ln964_fu_858_p2 <= std_logic_vector(unsigned(sub_ln964_fu_853_p2) + unsigned(select_ln943_fu_845_p3));
    and_ln195_1_fu_1293_p2 <= (grp_fu_221_p2 and and_ln195_fu_1287_p2);
    and_ln195_fu_1287_p2 <= (or_ln195_fu_1279_p2 and or_ln195_1_fu_1283_p2);
    and_ln949_1_fu_377_p2 <= (trunc_ln949_fu_373_p1 and p_Val2_s_reg_1304);
    and_ln949_2_fu_727_p2 <= (xor_ln949_fu_707_p2 and p_Result_23_fu_713_p3);
    and_ln949_3_fu_443_p2 <= (xor_ln949_1_fu_424_p2 and p_Result_26_fu_430_p3);
    and_ln949_4_fu_1005_p2 <= (or_ln949_fu_999_p2 and m_22_fu_919_p3);
    and_ln949_5_fu_1045_p2 <= (xor_ln949_2_fu_1025_p2 and p_Result_31_fu_1031_p3);
    and_ln949_fu_687_p2 <= (or_ln949_4_fu_681_p2 and m_19_fu_601_p3);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(2);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(3);
    ap_CS_fsm_pp0_stage2 <= ap_CS_fsm(4);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state11 <= ap_CS_fsm(5);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state1_assign_proc : process(ap_start, ap_done_reg, projectionToRow_empty_n, i_empty_n)
    begin
                ap_block_state1 <= ((i_empty_n = ap_const_logic_0) or (projectionToRow_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0));
    end process;

        ap_block_state10_pp0_stage1_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage2_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage2_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state5_assign_proc : process(icmp_ln193_reg_1351)
    begin
        if ((icmp_ln193_reg_1351 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state5 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state5 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_j_phi_fu_209_p4_assign_proc : process(j_reg_204, ap_CS_fsm_pp0_stage0, icmp_ln193_reg_1351, add_ln193_reg_1407, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((icmp_ln193_reg_1351 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            ap_phi_mux_j_phi_fu_209_p4 <= add_ln193_reg_1407;
        else 
            ap_phi_mux_j_phi_fu_209_p4 <= j_reg_204;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    bitcast_ln744_1_fu_753_p1 <= LD_1_reg_1360;
    bitcast_ln744_fu_887_p1 <= LD_fu_883_p1;
    data_V_1_fu_1211_p3 <= 
        ap_const_lv31_0 when (icmp_ln935_1_reg_1422(0) = '1') else 
        LD_2_fu_1207_p1;
    data_V_fu_1143_p1 <= dc_reg_1417;
    grp_fu_221_p0 <= p_Result_28_fu_1154_p3;
    grp_fu_221_p1 <= p_Result_33_fu_1222_p3;

    i_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, i_empty_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            i_blk_n <= i_empty_n;
        else 
            i_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    i_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, projectionToRow_empty_n, i_empty_n)
    begin
        if ((not(((i_empty_n = ap_const_logic_0) or (projectionToRow_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            i_read <= ap_const_logic_1;
        else 
            i_read <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln193_fu_248_p2 <= "1" when (ap_phi_mux_j_phi_fu_209_p4 = num_points_load_reg_1330) else "0";
    icmp_ln195_1_fu_1261_p2 <= "1" when (trunc_ln195_fu_1150_p1 = ap_const_lv23_0) else "0";
    icmp_ln195_2_fu_1267_p2 <= "0" when (tmp_6_fu_1245_p4 = ap_const_lv8_FF) else "1";
    icmp_ln195_3_fu_1273_p2 <= "1" when (trunc_ln195_1_fu_1218_p1 = ap_const_lv23_0) else "0";
    icmp_ln195_fu_1255_p2 <= "0" when (tmp_5_fu_1235_p4 = ap_const_lv8_FF) else "1";
    icmp_ln935_1_fu_899_p2 <= "1" when (start_value_i = ap_const_lv32_0) else "0";
    icmp_ln935_fu_769_p2 <= "1" when (z_bits_reg_1365 = ap_const_lv32_0) else "0";
    icmp_ln946_1_fu_336_p2 <= "1" when (signed(tmp_44_fu_326_p4) > signed(ap_const_lv31_0)) else "0";
    icmp_ln946_2_fu_967_p2 <= "1" when (signed(tmp_48_fu_957_p4) > signed(ap_const_lv31_0)) else "0";
    icmp_ln946_fu_649_p2 <= "1" when (signed(tmp_41_fu_639_p4) > signed(ap_const_lv31_0)) else "0";
    icmp_ln949_1_fu_410_p2 <= "0" when (or_ln949_1_fu_402_p3 = ap_const_lv32_0) else "1";
    icmp_ln949_2_fu_1011_p2 <= "0" when (and_ln949_4_fu_1005_p2 = ap_const_lv32_0) else "1";
    icmp_ln949_fu_693_p2 <= "0" when (and_ln949_fu_687_p2 = ap_const_lv32_0) else "1";
    icmp_ln958_1_fu_437_p2 <= "1" when (signed(lsb_index_1_fu_320_p2) > signed(ap_const_lv32_0)) else "0";
    icmp_ln958_2_fu_1039_p2 <= "1" when (signed(lsb_index_2_fu_951_p2) > signed(ap_const_lv32_0)) else "0";
    icmp_ln958_fu_721_p2 <= "1" when (signed(lsb_index_fu_633_p2) > signed(ap_const_lv32_0)) else "0";
    idxprom_i_fu_225_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_dout),64));
    
    l_1_fu_306_p3_proc : process(p_Result_25_fu_297_p4)
    begin
        l_1_fu_306_p3 <= std_logic_vector(to_unsigned(32, 32));
        for i in 0 to 32 - 1 loop
            if p_Result_25_fu_297_p4(i) = '1' then
                l_1_fu_306_p3 <= std_logic_vector(to_unsigned(i,32));
                exit;
            end if;
        end loop;
    end process;

    
    l_2_fu_937_p3_proc : process(p_Result_30_fu_927_p4)
    begin
        l_2_fu_937_p3 <= std_logic_vector(to_unsigned(32, 32));
        for i in 0 to 32 - 1 loop
            if p_Result_30_fu_927_p4(i) = '1' then
                l_2_fu_937_p3 <= std_logic_vector(to_unsigned(i,32));
                exit;
            end if;
        end loop;
    end process;

    
    l_fu_619_p3_proc : process(p_Result_22_fu_609_p4)
    begin
        l_fu_619_p3 <= std_logic_vector(to_unsigned(32, 32));
        for i in 0 to 32 - 1 loop
            if p_Result_22_fu_609_p4(i) = '1' then
                l_fu_619_p3 <= std_logic_vector(to_unsigned(i,32));
                exit;
            end if;
        end loop;
    end process;

    lsb_index_1_fu_320_p2 <= std_logic_vector(unsigned(sub_ln944_1_fu_314_p2) + unsigned(ap_const_lv32_FFFFFFE8));
    lsb_index_2_fu_951_p2 <= std_logic_vector(unsigned(sub_ln944_2_fu_945_p2) + unsigned(ap_const_lv32_FFFFFFE8));
    lsb_index_fu_633_p2 <= std_logic_vector(unsigned(sub_ln944_fu_627_p2) + unsigned(ap_const_lv32_FFFFFFE8));
    lshr_ln947_1_fu_356_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv32_FFFFFFFF),to_integer(unsigned('0' & zext_ln947_1_fu_352_p1(31-1 downto 0)))));
    lshr_ln947_2_fu_987_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv32_FFFFFFFF),to_integer(unsigned('0' & zext_ln947_2_fu_983_p1(31-1 downto 0)))));
    lshr_ln947_fu_669_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv32_FFFFFFFF),to_integer(unsigned('0' & zext_ln947_fu_665_p1(31-1 downto 0)))));
    lshr_ln958_1_fu_482_p2 <= std_logic_vector(shift_right(unsigned(m_10_cast_i_reg_1340),to_integer(unsigned('0' & zext_ln958_1_fu_478_p1(31-1 downto 0)))));
    lshr_ln958_2_fu_1089_p2 <= std_logic_vector(shift_right(unsigned(zext_ln959_3_fu_1051_p1),to_integer(unsigned('0' & zext_ln958_2_fu_1085_p1(31-1 downto 0)))));
    lshr_ln958_fu_801_p2 <= std_logic_vector(shift_right(unsigned(zext_ln959_fu_774_p1),to_integer(unsigned('0' & zext_ln958_fu_797_p1(31-1 downto 0)))));
    lshr_ln_fu_270_p4 <= add_ln194_fu_265_p2(15 downto 13);
    m_10_cast_i_fu_238_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Val2_s_reg_1304),64));
    m_12_fu_495_p3 <= 
        lshr_ln958_1_fu_482_p2 when (icmp_ln958_1_fu_437_p2(0) = '1') else 
        shl_ln959_1_fu_459_p2;
    m_13_fu_507_p2 <= std_logic_vector(unsigned(m_12_fu_495_p3) + unsigned(zext_ln961_1_fu_503_p1));
    m_16_fu_1103_p3 <= 
        lshr_ln958_2_fu_1089_p2 when (icmp_ln958_2_fu_1039_p2(0) = '1') else 
        shl_ln959_2_fu_1065_p2;
    m_17_fu_1115_p2 <= std_logic_vector(unsigned(m_16_fu_1103_p3) + unsigned(zext_ln961_2_fu_1111_p1));
    m_19_fu_601_p3 <= 
        tmp_V_fu_595_p2 when (p_Result_21_fu_587_p3(0) = '1') else 
        z_bits_fu_583_p1;
    m_20_fu_823_p4 <= m_8_fu_817_p2(63 downto 1);
    m_21_fu_513_p4 <= m_13_fu_507_p2(63 downto 1);
    m_22_fu_919_p3 <= 
        tmp_V_4_fu_913_p2 when (p_Result_29_fu_905_p3(0) = '1') else 
        start_value_i;
    m_8_fu_817_p2 <= std_logic_vector(unsigned(m_fu_807_p3) + unsigned(zext_ln961_fu_814_p1));
    m_fu_807_p3 <= 
        lshr_ln958_fu_801_p2 when (icmp_ln958_reg_1387(0) = '1') else 
        shl_ln959_fu_786_p2;
    num_points_address1 <= idxprom_i_fu_225_p1(3 - 1 downto 0);

    num_points_ce1_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, projectionToRow_empty_n, i_empty_n)
    begin
        if ((not(((i_empty_n = ap_const_logic_0) or (projectionToRow_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            num_points_ce1 <= ap_const_logic_1;
        else 
            num_points_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    or_ln195_1_fu_1283_p2 <= (icmp_ln195_3_reg_1472 or icmp_ln195_2_reg_1467);
    or_ln195_fu_1279_p2 <= (icmp_ln195_reg_1457 or icmp_ln195_1_reg_1462);
    or_ln949_1_fu_402_p3 <= (tmp_fu_392_p4 & or_ln949_3_fu_386_p2);
    or_ln949_3_fu_386_p2 <= (trunc_ln949_1_fu_382_p1 or and_ln949_1_fu_377_p2);
    or_ln949_4_fu_681_p2 <= (shl_ln949_fu_675_p2 or lshr_ln947_fu_669_p2);
    or_ln949_fu_999_p2 <= (shl_ln949_2_fu_993_p2 or lshr_ln947_2_fu_987_p2);
    p_Result_10_fu_362_p2 <= (projectionToRow_cast1_i_reg_1322 and lshr_ln947_1_fu_356_p2);
    p_Result_12_fu_527_p3 <= m_13_fu_507_p2(25 downto 25);
    p_Result_21_fu_587_p3 <= points_q1(31 downto 31);
    
    p_Result_22_fu_609_p4_proc : process(m_19_fu_601_p3)
    variable vlo_cpy : STD_LOGIC_VECTOR(32+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(32+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable p_Result_22_fu_609_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(32 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(5 - 1 downto 0) := ap_const_lv32_1F(5 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(5 - 1 downto 0) := ap_const_lv32_0(5 - 1 downto 0);
        v0_cpy := m_19_fu_601_p3;
        if (vlo_cpy(5 - 1 downto 0) > vhi_cpy(5 - 1 downto 0)) then
            vhi_cpy(5-1 downto 0) := std_logic_vector(32-1-unsigned(ap_const_lv32_0(5-1 downto 0)));
            vlo_cpy(5-1 downto 0) := std_logic_vector(32-1-unsigned(ap_const_lv32_1F(5-1 downto 0)));
            for p_Result_22_fu_609_p4_i in 0 to 32-1 loop
                v0_cpy(p_Result_22_fu_609_p4_i) := m_19_fu_601_p3(32-1-p_Result_22_fu_609_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(5-1 downto 0)))));

        section := (others=>'0');
        section(5-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(5-1 downto 0)) - unsigned(vlo_cpy(5-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(32-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        p_Result_22_fu_609_p4 <= resvalue(32-1 downto 0);
    end process;

    p_Result_23_fu_713_p3 <= m_19_fu_601_p3(to_integer(unsigned(lsb_index_fu_633_p2)) downto to_integer(unsigned(lsb_index_fu_633_p2))) when (to_integer(unsigned(lsb_index_fu_633_p2))>= 0 and to_integer(unsigned(lsb_index_fu_633_p2))<=31) else "-";
    p_Result_24_fu_871_p5 <= (zext_ln962_fu_833_p1(63 downto 32) & tmp_i_fu_864_p3 & zext_ln962_fu_833_p1(22 downto 0));
    
    p_Result_25_fu_297_p4_proc : process(projectionToRow_cast1_i_reg_1322)
    variable vlo_cpy : STD_LOGIC_VECTOR(32+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(32+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable p_Result_25_fu_297_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(32 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(5 - 1 downto 0) := ap_const_lv32_1F(5 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(5 - 1 downto 0) := ap_const_lv32_0(5 - 1 downto 0);
        v0_cpy := projectionToRow_cast1_i_reg_1322;
        if (vlo_cpy(5 - 1 downto 0) > vhi_cpy(5 - 1 downto 0)) then
            vhi_cpy(5-1 downto 0) := std_logic_vector(32-1-unsigned(ap_const_lv32_0(5-1 downto 0)));
            vlo_cpy(5-1 downto 0) := std_logic_vector(32-1-unsigned(ap_const_lv32_1F(5-1 downto 0)));
            for p_Result_25_fu_297_p4_i in 0 to 32-1 loop
                v0_cpy(p_Result_25_fu_297_p4_i) := projectionToRow_cast1_i_reg_1322(32-1-p_Result_25_fu_297_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(5-1 downto 0)))));

        section := (others=>'0');
        section(5-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(5-1 downto 0)) - unsigned(vlo_cpy(5-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(32-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        p_Result_25_fu_297_p4 <= resvalue(32-1 downto 0);
    end process;

    p_Result_26_fu_430_p3 <= projectionToRow_cast1_i_reg_1322(to_integer(unsigned(lsb_index_1_fu_320_p2)) downto to_integer(unsigned(lsb_index_1_fu_320_p2))) when (to_integer(unsigned(lsb_index_1_fu_320_p2))>= 0 and to_integer(unsigned(lsb_index_1_fu_320_p2))<=31) else "-";
    p_Result_27_fu_567_p5 <= (zext_ln962_1_fu_523_p1(63 downto 32) & tmp_3_i_fu_559_p3 & zext_ln962_1_fu_523_p1(22 downto 0));
    p_Result_28_fu_1154_p3 <= (ap_const_lv1_0 & trunc_ln368_fu_1146_p1);
    p_Result_29_fu_905_p3 <= start_value_i(31 downto 31);
    
    p_Result_30_fu_927_p4_proc : process(m_22_fu_919_p3)
    variable vlo_cpy : STD_LOGIC_VECTOR(32+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(32+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable p_Result_30_fu_927_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(32 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(5 - 1 downto 0) := ap_const_lv32_1F(5 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(5 - 1 downto 0) := ap_const_lv32_0(5 - 1 downto 0);
        v0_cpy := m_22_fu_919_p3;
        if (vlo_cpy(5 - 1 downto 0) > vhi_cpy(5 - 1 downto 0)) then
            vhi_cpy(5-1 downto 0) := std_logic_vector(32-1-unsigned(ap_const_lv32_0(5-1 downto 0)));
            vlo_cpy(5-1 downto 0) := std_logic_vector(32-1-unsigned(ap_const_lv32_1F(5-1 downto 0)));
            for p_Result_30_fu_927_p4_i in 0 to 32-1 loop
                v0_cpy(p_Result_30_fu_927_p4_i) := m_22_fu_919_p3(32-1-p_Result_30_fu_927_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(5-1 downto 0)))));

        section := (others=>'0');
        section(5-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(5-1 downto 0)) - unsigned(vlo_cpy(5-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(32-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        p_Result_30_fu_927_p4 <= resvalue(32-1 downto 0);
    end process;

    p_Result_31_fu_1031_p3 <= m_22_fu_919_p3(to_integer(unsigned(lsb_index_2_fu_951_p2)) downto to_integer(unsigned(lsb_index_2_fu_951_p2))) when (to_integer(unsigned(lsb_index_2_fu_951_p2))>= 0 and to_integer(unsigned(lsb_index_2_fu_951_p2))<=31) else "-";
    p_Result_32_fu_1195_p5 <= (zext_ln962_2_fu_1167_p1(63 downto 32) & tmp_5_i_fu_1188_p3 & zext_ln962_2_fu_1167_p1(22 downto 0));
    p_Result_33_fu_1222_p3 <= (ap_const_lv1_0 & data_V_1_fu_1211_p3);
    p_Result_s_fu_837_p3 <= m_8_fu_817_p2(25 downto 25);
    points_address1 <= zext_ln194_fu_292_p1(12 - 1 downto 0);

    points_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            points_ce1 <= ap_const_logic_1;
        else 
            points_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    projectionToRow_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, projectionToRow_empty_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            projectionToRow_blk_n <= projectionToRow_empty_n;
        else 
            projectionToRow_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    projectionToRow_cast1_i_fu_230_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Val2_s_reg_1304),32));

    projectionToRow_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, projectionToRow_empty_n, i_empty_n)
    begin
        if ((not(((i_empty_n = ap_const_logic_0) or (projectionToRow_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            projectionToRow_read <= ap_const_logic_1;
        else 
            projectionToRow_read <= ap_const_logic_0;
        end if; 
    end process;

    retval_0_i81_i_fu_756_p3 <= 
        ap_const_lv32_0 when (tobool_i19_i_reg_1335(0) = '1') else 
        bitcast_ln744_1_fu_753_p1;
    select_ln935_fu_891_p3 <= 
        ap_const_lv32_0 when (icmp_ln935_fu_769_p2(0) = '1') else 
        bitcast_ln744_fu_887_p1;
    select_ln943_1_fu_535_p3 <= 
        ap_const_lv8_7F when (p_Result_12_fu_527_p3(0) = '1') else 
        ap_const_lv8_7E;
    select_ln943_2_fu_1170_p3 <= 
        ap_const_lv8_7F when (p_Result_18_reg_1437(0) = '1') else 
        ap_const_lv8_7E;
    select_ln943_fu_845_p3 <= 
        ap_const_lv8_7F when (p_Result_s_fu_837_p3(0) = '1') else 
        ap_const_lv8_7E;
    select_ln946_1_fu_464_p3 <= 
        icmp_ln949_1_fu_410_p2 when (icmp_ln946_1_fu_336_p2(0) = '1') else 
        p_Result_26_fu_430_p3;
    select_ln946_2_fu_1071_p3 <= 
        icmp_ln949_2_fu_1011_p2 when (icmp_ln946_2_fu_967_p2(0) = '1') else 
        p_Result_31_fu_1031_p3;
    select_ln946_fu_733_p3 <= 
        icmp_ln949_fu_693_p2 when (icmp_ln946_fu_649_p2(0) = '1') else 
        p_Result_23_fu_713_p3;
    select_ln958_2_fu_487_p3 <= 
        select_ln946_1_fu_464_p3 when (icmp_ln958_1_fu_437_p2(0) = '1') else 
        and_ln949_3_fu_443_p2;
    select_ln958_4_fu_1095_p3 <= 
        select_ln946_2_fu_1071_p3 when (icmp_ln958_2_fu_1039_p2(0) = '1') else 
        and_ln949_5_fu_1045_p2;
    select_ln958_fu_741_p3 <= 
        select_ln946_fu_733_p3 when (icmp_ln958_fu_721_p2(0) = '1') else 
        and_ln949_2_fu_727_p2;
    shl_ln194_1_fu_257_p3 <= (trunc_ln194_fu_253_p1 & ap_const_lv4_0);
    shl_ln949_1_fu_367_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv32_1),to_integer(unsigned('0' & lsb_index_1_fu_320_p2(31-1 downto 0)))));
    shl_ln949_2_fu_993_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv32_1),to_integer(unsigned('0' & lsb_index_2_fu_951_p2(31-1 downto 0)))));
    shl_ln949_fu_675_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv32_1),to_integer(unsigned('0' & lsb_index_fu_633_p2(31-1 downto 0)))));
    shl_ln959_1_fu_459_p2 <= std_logic_vector(shift_left(unsigned(m_10_cast_i_reg_1340),to_integer(unsigned('0' & zext_ln959_2_fu_455_p1(31-1 downto 0)))));
    shl_ln959_2_fu_1065_p2 <= std_logic_vector(shift_left(unsigned(zext_ln959_3_fu_1051_p1),to_integer(unsigned('0' & zext_ln959_4_fu_1061_p1(31-1 downto 0)))));
    shl_ln959_fu_786_p2 <= std_logic_vector(shift_left(unsigned(zext_ln959_fu_774_p1),to_integer(unsigned('0' & zext_ln959_1_fu_782_p1(31-1 downto 0)))));
    shl_ln_fu_241_p3 <= (i_1_reg_1312 & ap_const_lv13_0);

    start_index_assign_proc : process(j_reg_204_pp0_iter2_reg, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter2, start_index_preg, ap_block_pp0_stage1_01001, and_ln195_1_fu_1293_p2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_01001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_lv1_1 = and_ln195_1_fu_1293_p2))) then 
            start_index <= j_reg_204_pp0_iter2_reg;
        else 
            start_index <= start_index_preg;
        end if; 
    end process;


    start_index_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_enable_reg_pp0_iter2, and_ln195_1_fu_1293_p2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_lv1_1 = and_ln195_1_fu_1293_p2))) then 
            start_index_ap_vld <= ap_const_logic_1;
        else 
            start_index_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    start_value_o_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter2, ap_block_pp0_stage1_01001, and_ln195_1_fu_1293_p2, sub_ln703_fu_1299_p2, start_value_o_preg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_01001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_lv1_1 = and_ln195_1_fu_1293_p2))) then 
            start_value_o <= sub_ln703_fu_1299_p2;
        else 
            start_value_o <= start_value_o_preg;
        end if; 
    end process;


    start_value_o_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_enable_reg_pp0_iter2, and_ln195_1_fu_1293_p2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_lv1_1 = and_ln195_1_fu_1293_p2))) then 
            start_value_o_ap_vld <= ap_const_logic_1;
        else 
            start_value_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    sub_ln703_fu_1299_p2 <= std_logic_vector(unsigned(z_bits_reg_1365_pp0_iter1_reg) - unsigned(projectionToRow_cast1_i_reg_1322));
    sub_ln944_1_fu_314_p2 <= std_logic_vector(unsigned(ap_const_lv32_20) - unsigned(l_1_fu_306_p3));
    sub_ln944_2_fu_945_p2 <= std_logic_vector(unsigned(ap_const_lv32_20) - unsigned(l_2_fu_937_p3));
    sub_ln944_fu_627_p2 <= std_logic_vector(unsigned(ap_const_lv32_20) - unsigned(l_fu_619_p3));
    sub_ln947_1_fu_346_p2 <= std_logic_vector(signed(ap_const_lv6_39) - signed(trunc_ln947_1_fu_342_p1));
    sub_ln947_2_fu_977_p2 <= std_logic_vector(signed(ap_const_lv6_39) - signed(trunc_ln947_2_fu_973_p1));
    sub_ln947_fu_659_p2 <= std_logic_vector(signed(ap_const_lv6_39) - signed(trunc_ln947_fu_655_p1));
    sub_ln959_1_fu_449_p2 <= std_logic_vector(unsigned(ap_const_lv32_19) - unsigned(sub_ln944_1_fu_314_p2));
    sub_ln959_2_fu_1055_p2 <= std_logic_vector(unsigned(ap_const_lv32_19) - unsigned(sub_ln944_2_fu_945_p2));
    sub_ln959_fu_777_p2 <= std_logic_vector(unsigned(ap_const_lv32_19) - unsigned(sub_ln944_reg_1381));
    sub_ln964_1_fu_547_p2 <= std_logic_vector(unsigned(ap_const_lv8_C) - unsigned(trunc_ln943_1_fu_543_p1));
    sub_ln964_2_fu_1177_p2 <= std_logic_vector(unsigned(ap_const_lv8_C) - unsigned(trunc_ln943_2_reg_1442));
    sub_ln964_fu_853_p2 <= std_logic_vector(unsigned(ap_const_lv8_C) - unsigned(trunc_ln943_reg_1397));
    tmp_3_i_fu_559_p3 <= (ap_const_lv1_0 & add_ln964_1_fu_553_p2);
    tmp_41_fu_639_p4 <= lsb_index_fu_633_p2(31 downto 1);
    tmp_42_fu_699_p3 <= lsb_index_fu_633_p2(31 downto 31);
    tmp_44_fu_326_p4 <= lsb_index_1_fu_320_p2(31 downto 1);
    tmp_45_fu_416_p3 <= lsb_index_1_fu_320_p2(31 downto 31);
    tmp_48_fu_957_p4 <= lsb_index_2_fu_951_p2(31 downto 1);
    tmp_49_fu_1017_p3 <= lsb_index_2_fu_951_p2(31 downto 31);
    tmp_5_fu_1235_p4 <= data_V_fu_1143_p1(30 downto 23);
    tmp_5_i_fu_1188_p3 <= (p_Result_29_reg_1427 & add_ln964_2_fu_1182_p2);
    tmp_6_fu_1245_p4 <= data_V_1_fu_1211_p3(30 downto 23);
    tmp_V_4_fu_913_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(start_value_i));
    tmp_V_fu_595_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(z_bits_fu_583_p1));
    tmp_fu_392_p4 <= p_Result_10_fu_362_p2(31 downto 26);
    tmp_i_fu_864_p3 <= (p_Result_21_reg_1371 & add_ln964_fu_858_p2);
    tmp_s_fu_284_p3 <= (lshr_ln_fu_270_p4 & trunc_ln194_1_fu_280_p1);
    tobool_i19_i_fu_233_p2 <= "1" when (p_Val2_s_reg_1304 = ap_const_lv26_0) else "0";
    trunc_ln194_1_fu_280_p1 <= ap_phi_mux_j_phi_fu_209_p4(9 - 1 downto 0);
    trunc_ln194_fu_253_p1 <= ap_phi_mux_j_phi_fu_209_p4(12 - 1 downto 0);
    trunc_ln195_1_fu_1218_p1 <= data_V_1_fu_1211_p3(23 - 1 downto 0);
    trunc_ln195_fu_1150_p1 <= data_V_fu_1143_p1(23 - 1 downto 0);
    trunc_ln368_fu_1146_p1 <= data_V_fu_1143_p1(31 - 1 downto 0);
    trunc_ln943_1_fu_543_p1 <= l_1_fu_306_p3(8 - 1 downto 0);
    trunc_ln943_2_fu_1139_p1 <= l_2_fu_937_p3(8 - 1 downto 0);
    trunc_ln943_fu_749_p1 <= l_fu_619_p3(8 - 1 downto 0);
    trunc_ln947_1_fu_342_p1 <= sub_ln944_1_fu_314_p2(6 - 1 downto 0);
    trunc_ln947_2_fu_973_p1 <= sub_ln944_2_fu_945_p2(6 - 1 downto 0);
    trunc_ln947_fu_655_p1 <= sub_ln944_fu_627_p2(6 - 1 downto 0);
    trunc_ln949_1_fu_382_p1 <= p_Result_10_fu_362_p2(26 - 1 downto 0);
    trunc_ln949_fu_373_p1 <= shl_ln949_1_fu_367_p2(26 - 1 downto 0);
    xor_ln949_1_fu_424_p2 <= (tmp_45_fu_416_p3 xor ap_const_lv1_1);
    xor_ln949_2_fu_1025_p2 <= (tmp_49_fu_1017_p3 xor ap_const_lv1_1);
    xor_ln949_fu_707_p2 <= (tmp_42_fu_699_p3 xor ap_const_lv1_1);
    z_bits_fu_583_p1 <= points_q1(32 - 1 downto 0);
    zext_ln194_fu_292_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_fu_284_p3),64));
    zext_ln947_1_fu_352_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln947_1_fu_346_p2),32));
    zext_ln947_2_fu_983_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln947_2_fu_977_p2),32));
    zext_ln947_fu_665_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln947_fu_659_p2),32));
    zext_ln958_1_fu_478_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln958_1_fu_472_p2),64));
    zext_ln958_2_fu_1085_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln958_2_fu_1079_p2),64));
    zext_ln958_fu_797_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln958_fu_792_p2),64));
    zext_ln959_1_fu_782_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln959_fu_777_p2),64));
    zext_ln959_2_fu_455_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln959_1_fu_449_p2),64));
    zext_ln959_3_fu_1051_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(m_22_fu_919_p3),64));
    zext_ln959_4_fu_1061_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln959_2_fu_1055_p2),64));
    zext_ln959_fu_774_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(m_19_reg_1376),64));
    zext_ln961_1_fu_503_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln958_2_fu_487_p3),64));
    zext_ln961_2_fu_1111_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln958_4_fu_1095_p3),64));
    zext_ln961_fu_814_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln958_reg_1392),64));
    zext_ln962_1_fu_523_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(m_21_fu_513_p4),64));
    zext_ln962_2_fu_1167_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(m_23_reg_1432),64));
    zext_ln962_fu_833_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(m_20_fu_823_p4),64));
end behav;
