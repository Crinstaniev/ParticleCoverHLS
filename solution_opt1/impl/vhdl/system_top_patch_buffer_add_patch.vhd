-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Version: 2020.2
-- Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity system_top_patch_buffer_add_patch is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    new_patch_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    new_patch_ce0 : OUT STD_LOGIC;
    new_patch_q0 : IN STD_LOGIC_VECTOR (95 downto 0);
    new_patch_address1 : OUT STD_LOGIC_VECTOR (6 downto 0);
    new_patch_ce1 : OUT STD_LOGIC;
    new_patch_q1 : IN STD_LOGIC_VECTOR (95 downto 0);
    patch_buffer_0_0_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    patch_buffer_0_0_ce0 : OUT STD_LOGIC;
    patch_buffer_0_0_we0 : OUT STD_LOGIC;
    patch_buffer_0_0_d0 : OUT STD_LOGIC_VECTOR (95 downto 0);
    patch_buffer_0_1_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    patch_buffer_0_1_ce0 : OUT STD_LOGIC;
    patch_buffer_0_1_we0 : OUT STD_LOGIC;
    patch_buffer_0_1_d0 : OUT STD_LOGIC_VECTOR (95 downto 0);
    patch_buffer_0_2_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    patch_buffer_0_2_ce0 : OUT STD_LOGIC;
    patch_buffer_0_2_we0 : OUT STD_LOGIC;
    patch_buffer_0_2_d0 : OUT STD_LOGIC_VECTOR (95 downto 0);
    patch_buffer_0_3_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    patch_buffer_0_3_ce0 : OUT STD_LOGIC;
    patch_buffer_0_3_we0 : OUT STD_LOGIC;
    patch_buffer_0_3_d0 : OUT STD_LOGIC_VECTOR (95 downto 0);
    patch_buffer_0_4_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    patch_buffer_0_4_ce0 : OUT STD_LOGIC;
    patch_buffer_0_4_we0 : OUT STD_LOGIC;
    patch_buffer_0_4_d0 : OUT STD_LOGIC_VECTOR (95 downto 0);
    patch_buffer_0_5_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    patch_buffer_0_5_ce0 : OUT STD_LOGIC;
    patch_buffer_0_5_we0 : OUT STD_LOGIC;
    patch_buffer_0_5_d0 : OUT STD_LOGIC_VECTOR (95 downto 0);
    patch_buffer_0_6_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    patch_buffer_0_6_ce0 : OUT STD_LOGIC;
    patch_buffer_0_6_we0 : OUT STD_LOGIC;
    patch_buffer_0_6_d0 : OUT STD_LOGIC_VECTOR (95 downto 0);
    patch_buffer_0_7_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    patch_buffer_0_7_ce0 : OUT STD_LOGIC;
    patch_buffer_0_7_we0 : OUT STD_LOGIC;
    patch_buffer_0_7_d0 : OUT STD_LOGIC_VECTOR (95 downto 0);
    patch_buffer_0_8_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    patch_buffer_0_8_ce0 : OUT STD_LOGIC;
    patch_buffer_0_8_we0 : OUT STD_LOGIC;
    patch_buffer_0_8_d0 : OUT STD_LOGIC_VECTOR (95 downto 0);
    patch_buffer_0_9_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    patch_buffer_0_9_ce0 : OUT STD_LOGIC;
    patch_buffer_0_9_we0 : OUT STD_LOGIC;
    patch_buffer_0_9_d0 : OUT STD_LOGIC_VECTOR (95 downto 0);
    patch_buffer_0_10_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    patch_buffer_0_10_ce0 : OUT STD_LOGIC;
    patch_buffer_0_10_we0 : OUT STD_LOGIC;
    patch_buffer_0_10_d0 : OUT STD_LOGIC_VECTOR (95 downto 0);
    patch_buffer_0_11_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    patch_buffer_0_11_ce0 : OUT STD_LOGIC;
    patch_buffer_0_11_we0 : OUT STD_LOGIC;
    patch_buffer_0_11_d0 : OUT STD_LOGIC_VECTOR (95 downto 0);
    patch_buffer_0_12_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    patch_buffer_0_12_ce0 : OUT STD_LOGIC;
    patch_buffer_0_12_we0 : OUT STD_LOGIC;
    patch_buffer_0_12_d0 : OUT STD_LOGIC_VECTOR (95 downto 0);
    patch_buffer_0_13_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    patch_buffer_0_13_ce0 : OUT STD_LOGIC;
    patch_buffer_0_13_we0 : OUT STD_LOGIC;
    patch_buffer_0_13_d0 : OUT STD_LOGIC_VECTOR (95 downto 0);
    patch_buffer_0_14_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    patch_buffer_0_14_ce0 : OUT STD_LOGIC;
    patch_buffer_0_14_we0 : OUT STD_LOGIC;
    patch_buffer_0_14_d0 : OUT STD_LOGIC_VECTOR (95 downto 0);
    patch_buffer_0_15_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    patch_buffer_0_15_ce0 : OUT STD_LOGIC;
    patch_buffer_0_15_we0 : OUT STD_LOGIC;
    patch_buffer_0_15_d0 : OUT STD_LOGIC_VECTOR (95 downto 0);
    patch_buffer_1_0_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    patch_buffer_1_0_ce0 : OUT STD_LOGIC;
    patch_buffer_1_0_we0 : OUT STD_LOGIC;
    patch_buffer_1_0_d0 : OUT STD_LOGIC_VECTOR (95 downto 0);
    patch_buffer_1_1_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    patch_buffer_1_1_ce0 : OUT STD_LOGIC;
    patch_buffer_1_1_we0 : OUT STD_LOGIC;
    patch_buffer_1_1_d0 : OUT STD_LOGIC_VECTOR (95 downto 0);
    patch_buffer_1_2_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    patch_buffer_1_2_ce0 : OUT STD_LOGIC;
    patch_buffer_1_2_we0 : OUT STD_LOGIC;
    patch_buffer_1_2_d0 : OUT STD_LOGIC_VECTOR (95 downto 0);
    patch_buffer_1_3_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    patch_buffer_1_3_ce0 : OUT STD_LOGIC;
    patch_buffer_1_3_we0 : OUT STD_LOGIC;
    patch_buffer_1_3_d0 : OUT STD_LOGIC_VECTOR (95 downto 0);
    patch_buffer_1_4_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    patch_buffer_1_4_ce0 : OUT STD_LOGIC;
    patch_buffer_1_4_we0 : OUT STD_LOGIC;
    patch_buffer_1_4_d0 : OUT STD_LOGIC_VECTOR (95 downto 0);
    patch_buffer_1_5_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    patch_buffer_1_5_ce0 : OUT STD_LOGIC;
    patch_buffer_1_5_we0 : OUT STD_LOGIC;
    patch_buffer_1_5_d0 : OUT STD_LOGIC_VECTOR (95 downto 0);
    patch_buffer_1_6_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    patch_buffer_1_6_ce0 : OUT STD_LOGIC;
    patch_buffer_1_6_we0 : OUT STD_LOGIC;
    patch_buffer_1_6_d0 : OUT STD_LOGIC_VECTOR (95 downto 0);
    patch_buffer_1_7_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    patch_buffer_1_7_ce0 : OUT STD_LOGIC;
    patch_buffer_1_7_we0 : OUT STD_LOGIC;
    patch_buffer_1_7_d0 : OUT STD_LOGIC_VECTOR (95 downto 0);
    patch_buffer_1_8_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    patch_buffer_1_8_ce0 : OUT STD_LOGIC;
    patch_buffer_1_8_we0 : OUT STD_LOGIC;
    patch_buffer_1_8_d0 : OUT STD_LOGIC_VECTOR (95 downto 0);
    patch_buffer_1_9_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    patch_buffer_1_9_ce0 : OUT STD_LOGIC;
    patch_buffer_1_9_we0 : OUT STD_LOGIC;
    patch_buffer_1_9_d0 : OUT STD_LOGIC_VECTOR (95 downto 0);
    patch_buffer_1_10_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    patch_buffer_1_10_ce0 : OUT STD_LOGIC;
    patch_buffer_1_10_we0 : OUT STD_LOGIC;
    patch_buffer_1_10_d0 : OUT STD_LOGIC_VECTOR (95 downto 0);
    patch_buffer_1_11_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    patch_buffer_1_11_ce0 : OUT STD_LOGIC;
    patch_buffer_1_11_we0 : OUT STD_LOGIC;
    patch_buffer_1_11_d0 : OUT STD_LOGIC_VECTOR (95 downto 0);
    patch_buffer_1_12_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    patch_buffer_1_12_ce0 : OUT STD_LOGIC;
    patch_buffer_1_12_we0 : OUT STD_LOGIC;
    patch_buffer_1_12_d0 : OUT STD_LOGIC_VECTOR (95 downto 0);
    patch_buffer_1_13_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    patch_buffer_1_13_ce0 : OUT STD_LOGIC;
    patch_buffer_1_13_we0 : OUT STD_LOGIC;
    patch_buffer_1_13_d0 : OUT STD_LOGIC_VECTOR (95 downto 0);
    patch_buffer_1_14_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    patch_buffer_1_14_ce0 : OUT STD_LOGIC;
    patch_buffer_1_14_we0 : OUT STD_LOGIC;
    patch_buffer_1_14_d0 : OUT STD_LOGIC_VECTOR (95 downto 0);
    patch_buffer_1_15_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    patch_buffer_1_15_ce0 : OUT STD_LOGIC;
    patch_buffer_1_15_we0 : OUT STD_LOGIC;
    patch_buffer_1_15_d0 : OUT STD_LOGIC_VECTOR (95 downto 0);
    patch_buffer_2_0_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    patch_buffer_2_0_ce0 : OUT STD_LOGIC;
    patch_buffer_2_0_we0 : OUT STD_LOGIC;
    patch_buffer_2_0_d0 : OUT STD_LOGIC_VECTOR (95 downto 0);
    patch_buffer_2_1_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    patch_buffer_2_1_ce0 : OUT STD_LOGIC;
    patch_buffer_2_1_we0 : OUT STD_LOGIC;
    patch_buffer_2_1_d0 : OUT STD_LOGIC_VECTOR (95 downto 0);
    patch_buffer_2_2_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    patch_buffer_2_2_ce0 : OUT STD_LOGIC;
    patch_buffer_2_2_we0 : OUT STD_LOGIC;
    patch_buffer_2_2_d0 : OUT STD_LOGIC_VECTOR (95 downto 0);
    patch_buffer_2_3_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    patch_buffer_2_3_ce0 : OUT STD_LOGIC;
    patch_buffer_2_3_we0 : OUT STD_LOGIC;
    patch_buffer_2_3_d0 : OUT STD_LOGIC_VECTOR (95 downto 0);
    patch_buffer_2_4_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    patch_buffer_2_4_ce0 : OUT STD_LOGIC;
    patch_buffer_2_4_we0 : OUT STD_LOGIC;
    patch_buffer_2_4_d0 : OUT STD_LOGIC_VECTOR (95 downto 0);
    patch_buffer_2_5_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    patch_buffer_2_5_ce0 : OUT STD_LOGIC;
    patch_buffer_2_5_we0 : OUT STD_LOGIC;
    patch_buffer_2_5_d0 : OUT STD_LOGIC_VECTOR (95 downto 0);
    patch_buffer_2_6_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    patch_buffer_2_6_ce0 : OUT STD_LOGIC;
    patch_buffer_2_6_we0 : OUT STD_LOGIC;
    patch_buffer_2_6_d0 : OUT STD_LOGIC_VECTOR (95 downto 0);
    patch_buffer_2_7_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    patch_buffer_2_7_ce0 : OUT STD_LOGIC;
    patch_buffer_2_7_we0 : OUT STD_LOGIC;
    patch_buffer_2_7_d0 : OUT STD_LOGIC_VECTOR (95 downto 0);
    patch_buffer_2_8_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    patch_buffer_2_8_ce0 : OUT STD_LOGIC;
    patch_buffer_2_8_we0 : OUT STD_LOGIC;
    patch_buffer_2_8_d0 : OUT STD_LOGIC_VECTOR (95 downto 0);
    patch_buffer_2_9_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    patch_buffer_2_9_ce0 : OUT STD_LOGIC;
    patch_buffer_2_9_we0 : OUT STD_LOGIC;
    patch_buffer_2_9_d0 : OUT STD_LOGIC_VECTOR (95 downto 0);
    patch_buffer_2_10_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    patch_buffer_2_10_ce0 : OUT STD_LOGIC;
    patch_buffer_2_10_we0 : OUT STD_LOGIC;
    patch_buffer_2_10_d0 : OUT STD_LOGIC_VECTOR (95 downto 0);
    patch_buffer_2_11_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    patch_buffer_2_11_ce0 : OUT STD_LOGIC;
    patch_buffer_2_11_we0 : OUT STD_LOGIC;
    patch_buffer_2_11_d0 : OUT STD_LOGIC_VECTOR (95 downto 0);
    patch_buffer_2_12_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    patch_buffer_2_12_ce0 : OUT STD_LOGIC;
    patch_buffer_2_12_we0 : OUT STD_LOGIC;
    patch_buffer_2_12_d0 : OUT STD_LOGIC_VECTOR (95 downto 0);
    patch_buffer_2_13_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    patch_buffer_2_13_ce0 : OUT STD_LOGIC;
    patch_buffer_2_13_we0 : OUT STD_LOGIC;
    patch_buffer_2_13_d0 : OUT STD_LOGIC_VECTOR (95 downto 0);
    patch_buffer_2_14_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    patch_buffer_2_14_ce0 : OUT STD_LOGIC;
    patch_buffer_2_14_we0 : OUT STD_LOGIC;
    patch_buffer_2_14_d0 : OUT STD_LOGIC_VECTOR (95 downto 0);
    patch_buffer_2_15_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    patch_buffer_2_15_ce0 : OUT STD_LOGIC;
    patch_buffer_2_15_we0 : OUT STD_LOGIC;
    patch_buffer_2_15_d0 : OUT STD_LOGIC_VECTOR (95 downto 0);
    patch_buffer_3_0_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    patch_buffer_3_0_ce0 : OUT STD_LOGIC;
    patch_buffer_3_0_we0 : OUT STD_LOGIC;
    patch_buffer_3_0_d0 : OUT STD_LOGIC_VECTOR (95 downto 0);
    patch_buffer_3_1_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    patch_buffer_3_1_ce0 : OUT STD_LOGIC;
    patch_buffer_3_1_we0 : OUT STD_LOGIC;
    patch_buffer_3_1_d0 : OUT STD_LOGIC_VECTOR (95 downto 0);
    patch_buffer_3_2_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    patch_buffer_3_2_ce0 : OUT STD_LOGIC;
    patch_buffer_3_2_we0 : OUT STD_LOGIC;
    patch_buffer_3_2_d0 : OUT STD_LOGIC_VECTOR (95 downto 0);
    patch_buffer_3_3_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    patch_buffer_3_3_ce0 : OUT STD_LOGIC;
    patch_buffer_3_3_we0 : OUT STD_LOGIC;
    patch_buffer_3_3_d0 : OUT STD_LOGIC_VECTOR (95 downto 0);
    patch_buffer_3_4_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    patch_buffer_3_4_ce0 : OUT STD_LOGIC;
    patch_buffer_3_4_we0 : OUT STD_LOGIC;
    patch_buffer_3_4_d0 : OUT STD_LOGIC_VECTOR (95 downto 0);
    patch_buffer_3_5_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    patch_buffer_3_5_ce0 : OUT STD_LOGIC;
    patch_buffer_3_5_we0 : OUT STD_LOGIC;
    patch_buffer_3_5_d0 : OUT STD_LOGIC_VECTOR (95 downto 0);
    patch_buffer_3_6_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    patch_buffer_3_6_ce0 : OUT STD_LOGIC;
    patch_buffer_3_6_we0 : OUT STD_LOGIC;
    patch_buffer_3_6_d0 : OUT STD_LOGIC_VECTOR (95 downto 0);
    patch_buffer_3_7_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    patch_buffer_3_7_ce0 : OUT STD_LOGIC;
    patch_buffer_3_7_we0 : OUT STD_LOGIC;
    patch_buffer_3_7_d0 : OUT STD_LOGIC_VECTOR (95 downto 0);
    patch_buffer_3_8_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    patch_buffer_3_8_ce0 : OUT STD_LOGIC;
    patch_buffer_3_8_we0 : OUT STD_LOGIC;
    patch_buffer_3_8_d0 : OUT STD_LOGIC_VECTOR (95 downto 0);
    patch_buffer_3_9_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    patch_buffer_3_9_ce0 : OUT STD_LOGIC;
    patch_buffer_3_9_we0 : OUT STD_LOGIC;
    patch_buffer_3_9_d0 : OUT STD_LOGIC_VECTOR (95 downto 0);
    patch_buffer_3_10_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    patch_buffer_3_10_ce0 : OUT STD_LOGIC;
    patch_buffer_3_10_we0 : OUT STD_LOGIC;
    patch_buffer_3_10_d0 : OUT STD_LOGIC_VECTOR (95 downto 0);
    patch_buffer_3_11_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    patch_buffer_3_11_ce0 : OUT STD_LOGIC;
    patch_buffer_3_11_we0 : OUT STD_LOGIC;
    patch_buffer_3_11_d0 : OUT STD_LOGIC_VECTOR (95 downto 0);
    patch_buffer_3_12_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    patch_buffer_3_12_ce0 : OUT STD_LOGIC;
    patch_buffer_3_12_we0 : OUT STD_LOGIC;
    patch_buffer_3_12_d0 : OUT STD_LOGIC_VECTOR (95 downto 0);
    patch_buffer_3_13_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    patch_buffer_3_13_ce0 : OUT STD_LOGIC;
    patch_buffer_3_13_we0 : OUT STD_LOGIC;
    patch_buffer_3_13_d0 : OUT STD_LOGIC_VECTOR (95 downto 0);
    patch_buffer_3_14_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    patch_buffer_3_14_ce0 : OUT STD_LOGIC;
    patch_buffer_3_14_we0 : OUT STD_LOGIC;
    patch_buffer_3_14_d0 : OUT STD_LOGIC_VECTOR (95 downto 0);
    patch_buffer_3_15_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    patch_buffer_3_15_ce0 : OUT STD_LOGIC;
    patch_buffer_3_15_we0 : OUT STD_LOGIC;
    patch_buffer_3_15_d0 : OUT STD_LOGIC_VECTOR (95 downto 0);
    patch_buffer_4_0_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    patch_buffer_4_0_ce0 : OUT STD_LOGIC;
    patch_buffer_4_0_we0 : OUT STD_LOGIC;
    patch_buffer_4_0_d0 : OUT STD_LOGIC_VECTOR (95 downto 0);
    patch_buffer_4_1_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    patch_buffer_4_1_ce0 : OUT STD_LOGIC;
    patch_buffer_4_1_we0 : OUT STD_LOGIC;
    patch_buffer_4_1_d0 : OUT STD_LOGIC_VECTOR (95 downto 0);
    patch_buffer_4_2_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    patch_buffer_4_2_ce0 : OUT STD_LOGIC;
    patch_buffer_4_2_we0 : OUT STD_LOGIC;
    patch_buffer_4_2_d0 : OUT STD_LOGIC_VECTOR (95 downto 0);
    patch_buffer_4_3_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    patch_buffer_4_3_ce0 : OUT STD_LOGIC;
    patch_buffer_4_3_we0 : OUT STD_LOGIC;
    patch_buffer_4_3_d0 : OUT STD_LOGIC_VECTOR (95 downto 0);
    patch_buffer_4_4_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    patch_buffer_4_4_ce0 : OUT STD_LOGIC;
    patch_buffer_4_4_we0 : OUT STD_LOGIC;
    patch_buffer_4_4_d0 : OUT STD_LOGIC_VECTOR (95 downto 0);
    patch_buffer_4_5_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    patch_buffer_4_5_ce0 : OUT STD_LOGIC;
    patch_buffer_4_5_we0 : OUT STD_LOGIC;
    patch_buffer_4_5_d0 : OUT STD_LOGIC_VECTOR (95 downto 0);
    patch_buffer_4_6_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    patch_buffer_4_6_ce0 : OUT STD_LOGIC;
    patch_buffer_4_6_we0 : OUT STD_LOGIC;
    patch_buffer_4_6_d0 : OUT STD_LOGIC_VECTOR (95 downto 0);
    patch_buffer_4_7_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    patch_buffer_4_7_ce0 : OUT STD_LOGIC;
    patch_buffer_4_7_we0 : OUT STD_LOGIC;
    patch_buffer_4_7_d0 : OUT STD_LOGIC_VECTOR (95 downto 0);
    patch_buffer_4_8_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    patch_buffer_4_8_ce0 : OUT STD_LOGIC;
    patch_buffer_4_8_we0 : OUT STD_LOGIC;
    patch_buffer_4_8_d0 : OUT STD_LOGIC_VECTOR (95 downto 0);
    patch_buffer_4_9_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    patch_buffer_4_9_ce0 : OUT STD_LOGIC;
    patch_buffer_4_9_we0 : OUT STD_LOGIC;
    patch_buffer_4_9_d0 : OUT STD_LOGIC_VECTOR (95 downto 0);
    patch_buffer_4_10_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    patch_buffer_4_10_ce0 : OUT STD_LOGIC;
    patch_buffer_4_10_we0 : OUT STD_LOGIC;
    patch_buffer_4_10_d0 : OUT STD_LOGIC_VECTOR (95 downto 0);
    patch_buffer_4_11_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    patch_buffer_4_11_ce0 : OUT STD_LOGIC;
    patch_buffer_4_11_we0 : OUT STD_LOGIC;
    patch_buffer_4_11_d0 : OUT STD_LOGIC_VECTOR (95 downto 0);
    patch_buffer_4_12_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    patch_buffer_4_12_ce0 : OUT STD_LOGIC;
    patch_buffer_4_12_we0 : OUT STD_LOGIC;
    patch_buffer_4_12_d0 : OUT STD_LOGIC_VECTOR (95 downto 0);
    patch_buffer_4_13_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    patch_buffer_4_13_ce0 : OUT STD_LOGIC;
    patch_buffer_4_13_we0 : OUT STD_LOGIC;
    patch_buffer_4_13_d0 : OUT STD_LOGIC_VECTOR (95 downto 0);
    patch_buffer_4_14_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    patch_buffer_4_14_ce0 : OUT STD_LOGIC;
    patch_buffer_4_14_we0 : OUT STD_LOGIC;
    patch_buffer_4_14_d0 : OUT STD_LOGIC_VECTOR (95 downto 0);
    patch_buffer_4_15_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    patch_buffer_4_15_ce0 : OUT STD_LOGIC;
    patch_buffer_4_15_we0 : OUT STD_LOGIC;
    patch_buffer_4_15_d0 : OUT STD_LOGIC_VECTOR (95 downto 0);
    latest_patch_index_constprop_i : IN STD_LOGIC_VECTOR (1 downto 0);
    latest_patch_index_constprop_o : OUT STD_LOGIC_VECTOR (1 downto 0);
    latest_patch_index_constprop_o_ap_vld : OUT STD_LOGIC;
    num_patches_constprop_i : IN STD_LOGIC_VECTOR (31 downto 0);
    num_patches_constprop_o : OUT STD_LOGIC_VECTOR (31 downto 0);
    num_patches_constprop_o_ap_vld : OUT STD_LOGIC );
end;


architecture behav of system_top_patch_buffer_add_patch is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (40 downto 0) := "00000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (40 downto 0) := "00000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (40 downto 0) := "00000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (40 downto 0) := "00000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (40 downto 0) := "00000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (40 downto 0) := "00000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (40 downto 0) := "00000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (40 downto 0) := "00000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (40 downto 0) := "00000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (40 downto 0) := "00000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (40 downto 0) := "00000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (40 downto 0) := "00000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (40 downto 0) := "00000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (40 downto 0) := "00000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (40 downto 0) := "00000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (40 downto 0) := "00000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (40 downto 0) := "00000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (40 downto 0) := "00000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (40 downto 0) := "00000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (40 downto 0) := "00000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (40 downto 0) := "00000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (40 downto 0) := "00000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (40 downto 0) := "00000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (40 downto 0) := "00000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (40 downto 0) := "00000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (40 downto 0) := "00000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (40 downto 0) := "00000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (40 downto 0) := "00000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (40 downto 0) := "00000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (40 downto 0) := "00000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (40 downto 0) := "00000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (40 downto 0) := "00000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (40 downto 0) := "00000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (40 downto 0) := "00000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (40 downto 0) := "00000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (40 downto 0) := "00000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (40 downto 0) := "00001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (40 downto 0) := "00010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (40 downto 0) := "00100000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (40 downto 0) := "01000000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (40 downto 0) := "10000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_lv32_22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100010";
    constant ap_const_lv32_23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100011";
    constant ap_const_lv32_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100100";
    constant ap_const_lv32_25 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100101";
    constant ap_const_lv32_26 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100110";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv64_2 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000010";
    constant ap_const_lv64_3 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000011";
    constant ap_const_lv64_4 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000100";
    constant ap_const_lv64_5 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000101";
    constant ap_const_lv64_6 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000110";
    constant ap_const_lv64_7 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000111";
    constant ap_const_lv64_8 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001000";
    constant ap_const_lv64_9 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001001";
    constant ap_const_lv64_A : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001010";
    constant ap_const_lv64_B : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001011";
    constant ap_const_lv64_C : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001100";
    constant ap_const_lv64_D : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001101";
    constant ap_const_lv64_E : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001110";
    constant ap_const_lv64_F : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001111";
    constant ap_const_lv64_10 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000010000";
    constant ap_const_lv64_11 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000010001";
    constant ap_const_lv64_12 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000010010";
    constant ap_const_lv64_13 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000010011";
    constant ap_const_lv64_14 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000010100";
    constant ap_const_lv64_15 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000010101";
    constant ap_const_lv64_16 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000010110";
    constant ap_const_lv64_17 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000010111";
    constant ap_const_lv64_18 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000011000";
    constant ap_const_lv64_19 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000011001";
    constant ap_const_lv64_1A : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000011010";
    constant ap_const_lv64_1B : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000011011";
    constant ap_const_lv64_1C : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000011100";
    constant ap_const_lv64_1D : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000011101";
    constant ap_const_lv64_1E : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000011110";
    constant ap_const_lv64_1F : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000011111";
    constant ap_const_lv64_20 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000100000";
    constant ap_const_lv64_21 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000100001";
    constant ap_const_lv64_22 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000100010";
    constant ap_const_lv64_23 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000100011";
    constant ap_const_lv64_24 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000100100";
    constant ap_const_lv64_25 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000100101";
    constant ap_const_lv64_26 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000100110";
    constant ap_const_lv64_27 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000100111";
    constant ap_const_lv64_28 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000101000";
    constant ap_const_lv64_29 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000101001";
    constant ap_const_lv64_2A : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000101010";
    constant ap_const_lv64_2B : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000101011";
    constant ap_const_lv64_2C : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000101100";
    constant ap_const_lv64_2D : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000101101";
    constant ap_const_lv64_2E : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000101110";
    constant ap_const_lv64_2F : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000101111";
    constant ap_const_lv64_30 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000110000";
    constant ap_const_lv64_31 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000110001";
    constant ap_const_lv64_32 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000110010";
    constant ap_const_lv64_33 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000110011";
    constant ap_const_lv64_34 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000110100";
    constant ap_const_lv64_35 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000110101";
    constant ap_const_lv64_36 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000110110";
    constant ap_const_lv64_37 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000110111";
    constant ap_const_lv64_38 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000111000";
    constant ap_const_lv64_39 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000111001";
    constant ap_const_lv64_3A : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000111010";
    constant ap_const_lv64_3B : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000111011";
    constant ap_const_lv64_3C : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000111100";
    constant ap_const_lv64_3D : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000111101";
    constant ap_const_lv64_3E : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000111110";
    constant ap_const_lv64_3F : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000111111";
    constant ap_const_lv64_40 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000001000000";
    constant ap_const_lv64_41 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000001000001";
    constant ap_const_lv64_42 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000001000010";
    constant ap_const_lv64_43 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000001000011";
    constant ap_const_lv64_44 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000001000100";
    constant ap_const_lv64_45 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000001000101";
    constant ap_const_lv64_46 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000001000110";
    constant ap_const_lv64_47 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000001000111";
    constant ap_const_lv64_48 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000001001000";
    constant ap_const_lv64_49 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000001001001";
    constant ap_const_lv64_4A : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000001001010";
    constant ap_const_lv64_4B : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000001001011";
    constant ap_const_lv64_4C : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000001001100";
    constant ap_const_lv64_4D : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000001001101";
    constant ap_const_lv64_4E : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000001001110";
    constant ap_const_lv64_4F : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000001001111";
    constant ap_const_lv32_28 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101000";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv3_3 : STD_LOGIC_VECTOR (2 downto 0) := "011";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_boolean_1 : BOOLEAN := true;

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (40 downto 0) := "00000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal idxprom4_fu_2243_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal idxprom4_reg_2269 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal ap_CS_fsm_state27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal ap_CS_fsm_state28 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state28 : signal is "none";
    signal ap_CS_fsm_state29 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state29 : signal is "none";
    signal ap_CS_fsm_state30 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state30 : signal is "none";
    signal ap_CS_fsm_state31 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state31 : signal is "none";
    signal ap_CS_fsm_state32 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state32 : signal is "none";
    signal ap_CS_fsm_state33 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state33 : signal is "none";
    signal ap_CS_fsm_state34 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state34 : signal is "none";
    signal ap_CS_fsm_state35 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state35 : signal is "none";
    signal ap_CS_fsm_state36 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state36 : signal is "none";
    signal ap_CS_fsm_state37 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state37 : signal is "none";
    signal ap_CS_fsm_state38 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state38 : signal is "none";
    signal ap_CS_fsm_state39 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state39 : signal is "none";
    signal ap_CS_fsm_state40 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state40 : signal is "none";
    signal ap_CS_fsm_state41 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state41 : signal is "none";
    signal select_ln15_fu_2229_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln16_fu_2187_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln15_fu_2203_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln15_fu_2207_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal icmp_ln15_fu_2217_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln15_fu_2213_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal xor_ln15_fu_2223_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (40 downto 0);
    signal ap_ce_reg : STD_LOGIC;


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                    idxprom4_reg_2269(1 downto 0) <= idxprom4_fu_2243_p1(1 downto 0);
            end if;
        end if;
    end process;
    idxprom4_reg_2269(63 downto 2) <= "00000000000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state40;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_state41;
            when ap_ST_fsm_state41 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln15_fu_2207_p2 <= std_logic_vector(unsigned(zext_ln15_fu_2203_p1) + unsigned(ap_const_lv3_1));
    add_ln16_fu_2187_p2 <= std_logic_vector(unsigned(num_patches_constprop_i) + unsigned(ap_const_lv32_1));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state22 <= ap_CS_fsm(21);
    ap_CS_fsm_state23 <= ap_CS_fsm(22);
    ap_CS_fsm_state24 <= ap_CS_fsm(23);
    ap_CS_fsm_state25 <= ap_CS_fsm(24);
    ap_CS_fsm_state26 <= ap_CS_fsm(25);
    ap_CS_fsm_state27 <= ap_CS_fsm(26);
    ap_CS_fsm_state28 <= ap_CS_fsm(27);
    ap_CS_fsm_state29 <= ap_CS_fsm(28);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state30 <= ap_CS_fsm(29);
    ap_CS_fsm_state31 <= ap_CS_fsm(30);
    ap_CS_fsm_state32 <= ap_CS_fsm(31);
    ap_CS_fsm_state33 <= ap_CS_fsm(32);
    ap_CS_fsm_state34 <= ap_CS_fsm(33);
    ap_CS_fsm_state35 <= ap_CS_fsm(34);
    ap_CS_fsm_state36 <= ap_CS_fsm(35);
    ap_CS_fsm_state37 <= ap_CS_fsm(36);
    ap_CS_fsm_state38 <= ap_CS_fsm(37);
    ap_CS_fsm_state39 <= ap_CS_fsm(38);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state40 <= ap_CS_fsm(39);
    ap_CS_fsm_state41 <= ap_CS_fsm(40);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state41)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state41) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state41)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state41)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln15_fu_2217_p2 <= "1" when (unsigned(add_ln15_fu_2207_p2) < unsigned(ap_const_lv3_3)) else "0";
    idxprom4_fu_2243_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln15_fu_2229_p3),64));

    latest_patch_index_constprop_o_assign_proc : process(latest_patch_index_constprop_i, ap_CS_fsm_state2, select_ln15_fu_2229_p3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            latest_patch_index_constprop_o <= select_ln15_fu_2229_p3;
        else 
            latest_patch_index_constprop_o <= latest_patch_index_constprop_i;
        end if; 
    end process;


    latest_patch_index_constprop_o_ap_vld_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            latest_patch_index_constprop_o_ap_vld <= ap_const_logic_1;
        else 
            latest_patch_index_constprop_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    new_patch_address0_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state19, ap_CS_fsm_state20, ap_CS_fsm_state21, ap_CS_fsm_state22, ap_CS_fsm_state23, ap_CS_fsm_state24, ap_CS_fsm_state25, ap_CS_fsm_state26, ap_CS_fsm_state27, ap_CS_fsm_state28, ap_CS_fsm_state29, ap_CS_fsm_state30, ap_CS_fsm_state31, ap_CS_fsm_state32, ap_CS_fsm_state33, ap_CS_fsm_state34, ap_CS_fsm_state35, ap_CS_fsm_state36, ap_CS_fsm_state37, ap_CS_fsm_state38, ap_CS_fsm_state39, ap_CS_fsm_state40)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state40)) then 
            new_patch_address0 <= ap_const_lv64_4F(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state39)) then 
            new_patch_address0 <= ap_const_lv64_4D(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state38)) then 
            new_patch_address0 <= ap_const_lv64_4B(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            new_patch_address0 <= ap_const_lv64_49(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
            new_patch_address0 <= ap_const_lv64_47(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
            new_patch_address0 <= ap_const_lv64_45(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
            new_patch_address0 <= ap_const_lv64_43(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
            new_patch_address0 <= ap_const_lv64_41(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            new_patch_address0 <= ap_const_lv64_3F(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
            new_patch_address0 <= ap_const_lv64_3D(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            new_patch_address0 <= ap_const_lv64_3B(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            new_patch_address0 <= ap_const_lv64_39(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            new_patch_address0 <= ap_const_lv64_37(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            new_patch_address0 <= ap_const_lv64_35(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            new_patch_address0 <= ap_const_lv64_33(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            new_patch_address0 <= ap_const_lv64_31(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            new_patch_address0 <= ap_const_lv64_2F(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            new_patch_address0 <= ap_const_lv64_2D(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            new_patch_address0 <= ap_const_lv64_2B(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            new_patch_address0 <= ap_const_lv64_29(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            new_patch_address0 <= ap_const_lv64_27(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            new_patch_address0 <= ap_const_lv64_25(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            new_patch_address0 <= ap_const_lv64_23(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            new_patch_address0 <= ap_const_lv64_21(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            new_patch_address0 <= ap_const_lv64_1F(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            new_patch_address0 <= ap_const_lv64_1D(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            new_patch_address0 <= ap_const_lv64_1B(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            new_patch_address0 <= ap_const_lv64_19(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            new_patch_address0 <= ap_const_lv64_17(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            new_patch_address0 <= ap_const_lv64_15(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            new_patch_address0 <= ap_const_lv64_13(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            new_patch_address0 <= ap_const_lv64_11(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            new_patch_address0 <= ap_const_lv64_F(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            new_patch_address0 <= ap_const_lv64_D(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            new_patch_address0 <= ap_const_lv64_B(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            new_patch_address0 <= ap_const_lv64_9(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            new_patch_address0 <= ap_const_lv64_7(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            new_patch_address0 <= ap_const_lv64_5(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            new_patch_address0 <= ap_const_lv64_3(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            new_patch_address0 <= ap_const_lv64_1(7 - 1 downto 0);
        else 
            new_patch_address0 <= "XXXXXXX";
        end if; 
    end process;


    new_patch_address1_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state19, ap_CS_fsm_state20, ap_CS_fsm_state21, ap_CS_fsm_state22, ap_CS_fsm_state23, ap_CS_fsm_state24, ap_CS_fsm_state25, ap_CS_fsm_state26, ap_CS_fsm_state27, ap_CS_fsm_state28, ap_CS_fsm_state29, ap_CS_fsm_state30, ap_CS_fsm_state31, ap_CS_fsm_state32, ap_CS_fsm_state33, ap_CS_fsm_state34, ap_CS_fsm_state35, ap_CS_fsm_state36, ap_CS_fsm_state37, ap_CS_fsm_state38, ap_CS_fsm_state39, ap_CS_fsm_state40)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state40)) then 
            new_patch_address1 <= ap_const_lv64_4E(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state39)) then 
            new_patch_address1 <= ap_const_lv64_4C(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state38)) then 
            new_patch_address1 <= ap_const_lv64_4A(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            new_patch_address1 <= ap_const_lv64_48(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
            new_patch_address1 <= ap_const_lv64_46(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
            new_patch_address1 <= ap_const_lv64_44(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
            new_patch_address1 <= ap_const_lv64_42(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
            new_patch_address1 <= ap_const_lv64_40(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            new_patch_address1 <= ap_const_lv64_3E(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
            new_patch_address1 <= ap_const_lv64_3C(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            new_patch_address1 <= ap_const_lv64_3A(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            new_patch_address1 <= ap_const_lv64_38(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            new_patch_address1 <= ap_const_lv64_36(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            new_patch_address1 <= ap_const_lv64_34(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            new_patch_address1 <= ap_const_lv64_32(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            new_patch_address1 <= ap_const_lv64_30(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            new_patch_address1 <= ap_const_lv64_2E(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            new_patch_address1 <= ap_const_lv64_2C(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            new_patch_address1 <= ap_const_lv64_2A(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            new_patch_address1 <= ap_const_lv64_28(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            new_patch_address1 <= ap_const_lv64_26(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            new_patch_address1 <= ap_const_lv64_24(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            new_patch_address1 <= ap_const_lv64_22(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            new_patch_address1 <= ap_const_lv64_20(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            new_patch_address1 <= ap_const_lv64_1E(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            new_patch_address1 <= ap_const_lv64_1C(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            new_patch_address1 <= ap_const_lv64_1A(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            new_patch_address1 <= ap_const_lv64_18(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            new_patch_address1 <= ap_const_lv64_16(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            new_patch_address1 <= ap_const_lv64_14(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            new_patch_address1 <= ap_const_lv64_12(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            new_patch_address1 <= ap_const_lv64_10(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            new_patch_address1 <= ap_const_lv64_E(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            new_patch_address1 <= ap_const_lv64_C(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            new_patch_address1 <= ap_const_lv64_A(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            new_patch_address1 <= ap_const_lv64_8(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            new_patch_address1 <= ap_const_lv64_6(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            new_patch_address1 <= ap_const_lv64_4(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            new_patch_address1 <= ap_const_lv64_2(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            new_patch_address1 <= ap_const_lv64_0(7 - 1 downto 0);
        else 
            new_patch_address1 <= "XXXXXXX";
        end if; 
    end process;


    new_patch_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state19, ap_CS_fsm_state20, ap_CS_fsm_state21, ap_CS_fsm_state22, ap_CS_fsm_state23, ap_CS_fsm_state24, ap_CS_fsm_state25, ap_CS_fsm_state26, ap_CS_fsm_state27, ap_CS_fsm_state28, ap_CS_fsm_state29, ap_CS_fsm_state30, ap_CS_fsm_state31, ap_CS_fsm_state32, ap_CS_fsm_state33, ap_CS_fsm_state34, ap_CS_fsm_state35, ap_CS_fsm_state36, ap_CS_fsm_state37, ap_CS_fsm_state38, ap_CS_fsm_state39, ap_CS_fsm_state40)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state39) or (ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            new_patch_ce0 <= ap_const_logic_1;
        else 
            new_patch_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    new_patch_ce1_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state19, ap_CS_fsm_state20, ap_CS_fsm_state21, ap_CS_fsm_state22, ap_CS_fsm_state23, ap_CS_fsm_state24, ap_CS_fsm_state25, ap_CS_fsm_state26, ap_CS_fsm_state27, ap_CS_fsm_state28, ap_CS_fsm_state29, ap_CS_fsm_state30, ap_CS_fsm_state31, ap_CS_fsm_state32, ap_CS_fsm_state33, ap_CS_fsm_state34, ap_CS_fsm_state35, ap_CS_fsm_state36, ap_CS_fsm_state37, ap_CS_fsm_state38, ap_CS_fsm_state39, ap_CS_fsm_state40)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state39) or (ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            new_patch_ce1 <= ap_const_logic_1;
        else 
            new_patch_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    num_patches_constprop_o_assign_proc : process(ap_CS_fsm_state1, num_patches_constprop_i, add_ln16_fu_2187_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            num_patches_constprop_o <= add_ln16_fu_2187_p2;
        else 
            num_patches_constprop_o <= num_patches_constprop_i;
        end if; 
    end process;


    num_patches_constprop_o_ap_vld_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            num_patches_constprop_o_ap_vld <= ap_const_logic_1;
        else 
            num_patches_constprop_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    patch_buffer_0_0_address0 <= idxprom4_fu_2243_p1(2 - 1 downto 0);

    patch_buffer_0_0_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            patch_buffer_0_0_ce0 <= ap_const_logic_1;
        else 
            patch_buffer_0_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    patch_buffer_0_0_d0 <= new_patch_q1;

    patch_buffer_0_0_we0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            patch_buffer_0_0_we0 <= ap_const_logic_1;
        else 
            patch_buffer_0_0_we0 <= ap_const_logic_0;
        end if; 
    end process;

    patch_buffer_0_10_address0 <= idxprom4_reg_2269(2 - 1 downto 0);

    patch_buffer_0_10_ce0_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            patch_buffer_0_10_ce0 <= ap_const_logic_1;
        else 
            patch_buffer_0_10_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    patch_buffer_0_10_d0 <= new_patch_q1;

    patch_buffer_0_10_we0_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            patch_buffer_0_10_we0 <= ap_const_logic_1;
        else 
            patch_buffer_0_10_we0 <= ap_const_logic_0;
        end if; 
    end process;

    patch_buffer_0_11_address0 <= idxprom4_reg_2269(2 - 1 downto 0);

    patch_buffer_0_11_ce0_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            patch_buffer_0_11_ce0 <= ap_const_logic_1;
        else 
            patch_buffer_0_11_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    patch_buffer_0_11_d0 <= new_patch_q0;

    patch_buffer_0_11_we0_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            patch_buffer_0_11_we0 <= ap_const_logic_1;
        else 
            patch_buffer_0_11_we0 <= ap_const_logic_0;
        end if; 
    end process;

    patch_buffer_0_12_address0 <= idxprom4_reg_2269(2 - 1 downto 0);

    patch_buffer_0_12_ce0_assign_proc : process(ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            patch_buffer_0_12_ce0 <= ap_const_logic_1;
        else 
            patch_buffer_0_12_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    patch_buffer_0_12_d0 <= new_patch_q1;

    patch_buffer_0_12_we0_assign_proc : process(ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            patch_buffer_0_12_we0 <= ap_const_logic_1;
        else 
            patch_buffer_0_12_we0 <= ap_const_logic_0;
        end if; 
    end process;

    patch_buffer_0_13_address0 <= idxprom4_reg_2269(2 - 1 downto 0);

    patch_buffer_0_13_ce0_assign_proc : process(ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            patch_buffer_0_13_ce0 <= ap_const_logic_1;
        else 
            patch_buffer_0_13_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    patch_buffer_0_13_d0 <= new_patch_q0;

    patch_buffer_0_13_we0_assign_proc : process(ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            patch_buffer_0_13_we0 <= ap_const_logic_1;
        else 
            patch_buffer_0_13_we0 <= ap_const_logic_0;
        end if; 
    end process;

    patch_buffer_0_14_address0 <= idxprom4_reg_2269(2 - 1 downto 0);

    patch_buffer_0_14_ce0_assign_proc : process(ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            patch_buffer_0_14_ce0 <= ap_const_logic_1;
        else 
            patch_buffer_0_14_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    patch_buffer_0_14_d0 <= new_patch_q1;

    patch_buffer_0_14_we0_assign_proc : process(ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            patch_buffer_0_14_we0 <= ap_const_logic_1;
        else 
            patch_buffer_0_14_we0 <= ap_const_logic_0;
        end if; 
    end process;

    patch_buffer_0_15_address0 <= idxprom4_reg_2269(2 - 1 downto 0);

    patch_buffer_0_15_ce0_assign_proc : process(ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            patch_buffer_0_15_ce0 <= ap_const_logic_1;
        else 
            patch_buffer_0_15_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    patch_buffer_0_15_d0 <= new_patch_q0;

    patch_buffer_0_15_we0_assign_proc : process(ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            patch_buffer_0_15_we0 <= ap_const_logic_1;
        else 
            patch_buffer_0_15_we0 <= ap_const_logic_0;
        end if; 
    end process;

    patch_buffer_0_1_address0 <= idxprom4_fu_2243_p1(2 - 1 downto 0);

    patch_buffer_0_1_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            patch_buffer_0_1_ce0 <= ap_const_logic_1;
        else 
            patch_buffer_0_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    patch_buffer_0_1_d0 <= new_patch_q0;

    patch_buffer_0_1_we0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            patch_buffer_0_1_we0 <= ap_const_logic_1;
        else 
            patch_buffer_0_1_we0 <= ap_const_logic_0;
        end if; 
    end process;

    patch_buffer_0_2_address0 <= idxprom4_reg_2269(2 - 1 downto 0);

    patch_buffer_0_2_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            patch_buffer_0_2_ce0 <= ap_const_logic_1;
        else 
            patch_buffer_0_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    patch_buffer_0_2_d0 <= new_patch_q1;

    patch_buffer_0_2_we0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            patch_buffer_0_2_we0 <= ap_const_logic_1;
        else 
            patch_buffer_0_2_we0 <= ap_const_logic_0;
        end if; 
    end process;

    patch_buffer_0_3_address0 <= idxprom4_reg_2269(2 - 1 downto 0);

    patch_buffer_0_3_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            patch_buffer_0_3_ce0 <= ap_const_logic_1;
        else 
            patch_buffer_0_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    patch_buffer_0_3_d0 <= new_patch_q0;

    patch_buffer_0_3_we0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            patch_buffer_0_3_we0 <= ap_const_logic_1;
        else 
            patch_buffer_0_3_we0 <= ap_const_logic_0;
        end if; 
    end process;

    patch_buffer_0_4_address0 <= idxprom4_reg_2269(2 - 1 downto 0);

    patch_buffer_0_4_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            patch_buffer_0_4_ce0 <= ap_const_logic_1;
        else 
            patch_buffer_0_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    patch_buffer_0_4_d0 <= new_patch_q1;

    patch_buffer_0_4_we0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            patch_buffer_0_4_we0 <= ap_const_logic_1;
        else 
            patch_buffer_0_4_we0 <= ap_const_logic_0;
        end if; 
    end process;

    patch_buffer_0_5_address0 <= idxprom4_reg_2269(2 - 1 downto 0);

    patch_buffer_0_5_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            patch_buffer_0_5_ce0 <= ap_const_logic_1;
        else 
            patch_buffer_0_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    patch_buffer_0_5_d0 <= new_patch_q0;

    patch_buffer_0_5_we0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            patch_buffer_0_5_we0 <= ap_const_logic_1;
        else 
            patch_buffer_0_5_we0 <= ap_const_logic_0;
        end if; 
    end process;

    patch_buffer_0_6_address0 <= idxprom4_reg_2269(2 - 1 downto 0);

    patch_buffer_0_6_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            patch_buffer_0_6_ce0 <= ap_const_logic_1;
        else 
            patch_buffer_0_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    patch_buffer_0_6_d0 <= new_patch_q1;

    patch_buffer_0_6_we0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            patch_buffer_0_6_we0 <= ap_const_logic_1;
        else 
            patch_buffer_0_6_we0 <= ap_const_logic_0;
        end if; 
    end process;

    patch_buffer_0_7_address0 <= idxprom4_reg_2269(2 - 1 downto 0);

    patch_buffer_0_7_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            patch_buffer_0_7_ce0 <= ap_const_logic_1;
        else 
            patch_buffer_0_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    patch_buffer_0_7_d0 <= new_patch_q0;

    patch_buffer_0_7_we0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            patch_buffer_0_7_we0 <= ap_const_logic_1;
        else 
            patch_buffer_0_7_we0 <= ap_const_logic_0;
        end if; 
    end process;

    patch_buffer_0_8_address0 <= idxprom4_reg_2269(2 - 1 downto 0);

    patch_buffer_0_8_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            patch_buffer_0_8_ce0 <= ap_const_logic_1;
        else 
            patch_buffer_0_8_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    patch_buffer_0_8_d0 <= new_patch_q1;

    patch_buffer_0_8_we0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            patch_buffer_0_8_we0 <= ap_const_logic_1;
        else 
            patch_buffer_0_8_we0 <= ap_const_logic_0;
        end if; 
    end process;

    patch_buffer_0_9_address0 <= idxprom4_reg_2269(2 - 1 downto 0);

    patch_buffer_0_9_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            patch_buffer_0_9_ce0 <= ap_const_logic_1;
        else 
            patch_buffer_0_9_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    patch_buffer_0_9_d0 <= new_patch_q0;

    patch_buffer_0_9_we0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            patch_buffer_0_9_we0 <= ap_const_logic_1;
        else 
            patch_buffer_0_9_we0 <= ap_const_logic_0;
        end if; 
    end process;

    patch_buffer_1_0_address0 <= idxprom4_reg_2269(2 - 1 downto 0);

    patch_buffer_1_0_ce0_assign_proc : process(ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            patch_buffer_1_0_ce0 <= ap_const_logic_1;
        else 
            patch_buffer_1_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    patch_buffer_1_0_d0 <= new_patch_q1;

    patch_buffer_1_0_we0_assign_proc : process(ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            patch_buffer_1_0_we0 <= ap_const_logic_1;
        else 
            patch_buffer_1_0_we0 <= ap_const_logic_0;
        end if; 
    end process;

    patch_buffer_1_10_address0 <= idxprom4_reg_2269(2 - 1 downto 0);

    patch_buffer_1_10_ce0_assign_proc : process(ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            patch_buffer_1_10_ce0 <= ap_const_logic_1;
        else 
            patch_buffer_1_10_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    patch_buffer_1_10_d0 <= new_patch_q1;

    patch_buffer_1_10_we0_assign_proc : process(ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            patch_buffer_1_10_we0 <= ap_const_logic_1;
        else 
            patch_buffer_1_10_we0 <= ap_const_logic_0;
        end if; 
    end process;

    patch_buffer_1_11_address0 <= idxprom4_reg_2269(2 - 1 downto 0);

    patch_buffer_1_11_ce0_assign_proc : process(ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            patch_buffer_1_11_ce0 <= ap_const_logic_1;
        else 
            patch_buffer_1_11_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    patch_buffer_1_11_d0 <= new_patch_q0;

    patch_buffer_1_11_we0_assign_proc : process(ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            patch_buffer_1_11_we0 <= ap_const_logic_1;
        else 
            patch_buffer_1_11_we0 <= ap_const_logic_0;
        end if; 
    end process;

    patch_buffer_1_12_address0 <= idxprom4_reg_2269(2 - 1 downto 0);

    patch_buffer_1_12_ce0_assign_proc : process(ap_CS_fsm_state16)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            patch_buffer_1_12_ce0 <= ap_const_logic_1;
        else 
            patch_buffer_1_12_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    patch_buffer_1_12_d0 <= new_patch_q1;

    patch_buffer_1_12_we0_assign_proc : process(ap_CS_fsm_state16)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            patch_buffer_1_12_we0 <= ap_const_logic_1;
        else 
            patch_buffer_1_12_we0 <= ap_const_logic_0;
        end if; 
    end process;

    patch_buffer_1_13_address0 <= idxprom4_reg_2269(2 - 1 downto 0);

    patch_buffer_1_13_ce0_assign_proc : process(ap_CS_fsm_state16)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            patch_buffer_1_13_ce0 <= ap_const_logic_1;
        else 
            patch_buffer_1_13_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    patch_buffer_1_13_d0 <= new_patch_q0;

    patch_buffer_1_13_we0_assign_proc : process(ap_CS_fsm_state16)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            patch_buffer_1_13_we0 <= ap_const_logic_1;
        else 
            patch_buffer_1_13_we0 <= ap_const_logic_0;
        end if; 
    end process;

    patch_buffer_1_14_address0 <= idxprom4_reg_2269(2 - 1 downto 0);

    patch_buffer_1_14_ce0_assign_proc : process(ap_CS_fsm_state17)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            patch_buffer_1_14_ce0 <= ap_const_logic_1;
        else 
            patch_buffer_1_14_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    patch_buffer_1_14_d0 <= new_patch_q1;

    patch_buffer_1_14_we0_assign_proc : process(ap_CS_fsm_state17)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            patch_buffer_1_14_we0 <= ap_const_logic_1;
        else 
            patch_buffer_1_14_we0 <= ap_const_logic_0;
        end if; 
    end process;

    patch_buffer_1_15_address0 <= idxprom4_reg_2269(2 - 1 downto 0);

    patch_buffer_1_15_ce0_assign_proc : process(ap_CS_fsm_state17)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            patch_buffer_1_15_ce0 <= ap_const_logic_1;
        else 
            patch_buffer_1_15_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    patch_buffer_1_15_d0 <= new_patch_q0;

    patch_buffer_1_15_we0_assign_proc : process(ap_CS_fsm_state17)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            patch_buffer_1_15_we0 <= ap_const_logic_1;
        else 
            patch_buffer_1_15_we0 <= ap_const_logic_0;
        end if; 
    end process;

    patch_buffer_1_1_address0 <= idxprom4_reg_2269(2 - 1 downto 0);

    patch_buffer_1_1_ce0_assign_proc : process(ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            patch_buffer_1_1_ce0 <= ap_const_logic_1;
        else 
            patch_buffer_1_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    patch_buffer_1_1_d0 <= new_patch_q0;

    patch_buffer_1_1_we0_assign_proc : process(ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            patch_buffer_1_1_we0 <= ap_const_logic_1;
        else 
            patch_buffer_1_1_we0 <= ap_const_logic_0;
        end if; 
    end process;

    patch_buffer_1_2_address0 <= idxprom4_reg_2269(2 - 1 downto 0);

    patch_buffer_1_2_ce0_assign_proc : process(ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            patch_buffer_1_2_ce0 <= ap_const_logic_1;
        else 
            patch_buffer_1_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    patch_buffer_1_2_d0 <= new_patch_q1;

    patch_buffer_1_2_we0_assign_proc : process(ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            patch_buffer_1_2_we0 <= ap_const_logic_1;
        else 
            patch_buffer_1_2_we0 <= ap_const_logic_0;
        end if; 
    end process;

    patch_buffer_1_3_address0 <= idxprom4_reg_2269(2 - 1 downto 0);

    patch_buffer_1_3_ce0_assign_proc : process(ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            patch_buffer_1_3_ce0 <= ap_const_logic_1;
        else 
            patch_buffer_1_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    patch_buffer_1_3_d0 <= new_patch_q0;

    patch_buffer_1_3_we0_assign_proc : process(ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            patch_buffer_1_3_we0 <= ap_const_logic_1;
        else 
            patch_buffer_1_3_we0 <= ap_const_logic_0;
        end if; 
    end process;

    patch_buffer_1_4_address0 <= idxprom4_reg_2269(2 - 1 downto 0);

    patch_buffer_1_4_ce0_assign_proc : process(ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            patch_buffer_1_4_ce0 <= ap_const_logic_1;
        else 
            patch_buffer_1_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    patch_buffer_1_4_d0 <= new_patch_q1;

    patch_buffer_1_4_we0_assign_proc : process(ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            patch_buffer_1_4_we0 <= ap_const_logic_1;
        else 
            patch_buffer_1_4_we0 <= ap_const_logic_0;
        end if; 
    end process;

    patch_buffer_1_5_address0 <= idxprom4_reg_2269(2 - 1 downto 0);

    patch_buffer_1_5_ce0_assign_proc : process(ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            patch_buffer_1_5_ce0 <= ap_const_logic_1;
        else 
            patch_buffer_1_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    patch_buffer_1_5_d0 <= new_patch_q0;

    patch_buffer_1_5_we0_assign_proc : process(ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            patch_buffer_1_5_we0 <= ap_const_logic_1;
        else 
            patch_buffer_1_5_we0 <= ap_const_logic_0;
        end if; 
    end process;

    patch_buffer_1_6_address0 <= idxprom4_reg_2269(2 - 1 downto 0);

    patch_buffer_1_6_ce0_assign_proc : process(ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            patch_buffer_1_6_ce0 <= ap_const_logic_1;
        else 
            patch_buffer_1_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    patch_buffer_1_6_d0 <= new_patch_q1;

    patch_buffer_1_6_we0_assign_proc : process(ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            patch_buffer_1_6_we0 <= ap_const_logic_1;
        else 
            patch_buffer_1_6_we0 <= ap_const_logic_0;
        end if; 
    end process;

    patch_buffer_1_7_address0 <= idxprom4_reg_2269(2 - 1 downto 0);

    patch_buffer_1_7_ce0_assign_proc : process(ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            patch_buffer_1_7_ce0 <= ap_const_logic_1;
        else 
            patch_buffer_1_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    patch_buffer_1_7_d0 <= new_patch_q0;

    patch_buffer_1_7_we0_assign_proc : process(ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            patch_buffer_1_7_we0 <= ap_const_logic_1;
        else 
            patch_buffer_1_7_we0 <= ap_const_logic_0;
        end if; 
    end process;

    patch_buffer_1_8_address0 <= idxprom4_reg_2269(2 - 1 downto 0);

    patch_buffer_1_8_ce0_assign_proc : process(ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            patch_buffer_1_8_ce0 <= ap_const_logic_1;
        else 
            patch_buffer_1_8_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    patch_buffer_1_8_d0 <= new_patch_q1;

    patch_buffer_1_8_we0_assign_proc : process(ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            patch_buffer_1_8_we0 <= ap_const_logic_1;
        else 
            patch_buffer_1_8_we0 <= ap_const_logic_0;
        end if; 
    end process;

    patch_buffer_1_9_address0 <= idxprom4_reg_2269(2 - 1 downto 0);

    patch_buffer_1_9_ce0_assign_proc : process(ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            patch_buffer_1_9_ce0 <= ap_const_logic_1;
        else 
            patch_buffer_1_9_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    patch_buffer_1_9_d0 <= new_patch_q0;

    patch_buffer_1_9_we0_assign_proc : process(ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            patch_buffer_1_9_we0 <= ap_const_logic_1;
        else 
            patch_buffer_1_9_we0 <= ap_const_logic_0;
        end if; 
    end process;

    patch_buffer_2_0_address0 <= idxprom4_reg_2269(2 - 1 downto 0);

    patch_buffer_2_0_ce0_assign_proc : process(ap_CS_fsm_state18)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            patch_buffer_2_0_ce0 <= ap_const_logic_1;
        else 
            patch_buffer_2_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    patch_buffer_2_0_d0 <= new_patch_q1;

    patch_buffer_2_0_we0_assign_proc : process(ap_CS_fsm_state18)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            patch_buffer_2_0_we0 <= ap_const_logic_1;
        else 
            patch_buffer_2_0_we0 <= ap_const_logic_0;
        end if; 
    end process;

    patch_buffer_2_10_address0 <= idxprom4_reg_2269(2 - 1 downto 0);

    patch_buffer_2_10_ce0_assign_proc : process(ap_CS_fsm_state23)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            patch_buffer_2_10_ce0 <= ap_const_logic_1;
        else 
            patch_buffer_2_10_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    patch_buffer_2_10_d0 <= new_patch_q1;

    patch_buffer_2_10_we0_assign_proc : process(ap_CS_fsm_state23)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            patch_buffer_2_10_we0 <= ap_const_logic_1;
        else 
            patch_buffer_2_10_we0 <= ap_const_logic_0;
        end if; 
    end process;

    patch_buffer_2_11_address0 <= idxprom4_reg_2269(2 - 1 downto 0);

    patch_buffer_2_11_ce0_assign_proc : process(ap_CS_fsm_state23)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            patch_buffer_2_11_ce0 <= ap_const_logic_1;
        else 
            patch_buffer_2_11_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    patch_buffer_2_11_d0 <= new_patch_q0;

    patch_buffer_2_11_we0_assign_proc : process(ap_CS_fsm_state23)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            patch_buffer_2_11_we0 <= ap_const_logic_1;
        else 
            patch_buffer_2_11_we0 <= ap_const_logic_0;
        end if; 
    end process;

    patch_buffer_2_12_address0 <= idxprom4_reg_2269(2 - 1 downto 0);

    patch_buffer_2_12_ce0_assign_proc : process(ap_CS_fsm_state24)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            patch_buffer_2_12_ce0 <= ap_const_logic_1;
        else 
            patch_buffer_2_12_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    patch_buffer_2_12_d0 <= new_patch_q1;

    patch_buffer_2_12_we0_assign_proc : process(ap_CS_fsm_state24)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            patch_buffer_2_12_we0 <= ap_const_logic_1;
        else 
            patch_buffer_2_12_we0 <= ap_const_logic_0;
        end if; 
    end process;

    patch_buffer_2_13_address0 <= idxprom4_reg_2269(2 - 1 downto 0);

    patch_buffer_2_13_ce0_assign_proc : process(ap_CS_fsm_state24)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            patch_buffer_2_13_ce0 <= ap_const_logic_1;
        else 
            patch_buffer_2_13_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    patch_buffer_2_13_d0 <= new_patch_q0;

    patch_buffer_2_13_we0_assign_proc : process(ap_CS_fsm_state24)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            patch_buffer_2_13_we0 <= ap_const_logic_1;
        else 
            patch_buffer_2_13_we0 <= ap_const_logic_0;
        end if; 
    end process;

    patch_buffer_2_14_address0 <= idxprom4_reg_2269(2 - 1 downto 0);

    patch_buffer_2_14_ce0_assign_proc : process(ap_CS_fsm_state25)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            patch_buffer_2_14_ce0 <= ap_const_logic_1;
        else 
            patch_buffer_2_14_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    patch_buffer_2_14_d0 <= new_patch_q1;

    patch_buffer_2_14_we0_assign_proc : process(ap_CS_fsm_state25)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            patch_buffer_2_14_we0 <= ap_const_logic_1;
        else 
            patch_buffer_2_14_we0 <= ap_const_logic_0;
        end if; 
    end process;

    patch_buffer_2_15_address0 <= idxprom4_reg_2269(2 - 1 downto 0);

    patch_buffer_2_15_ce0_assign_proc : process(ap_CS_fsm_state25)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            patch_buffer_2_15_ce0 <= ap_const_logic_1;
        else 
            patch_buffer_2_15_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    patch_buffer_2_15_d0 <= new_patch_q0;

    patch_buffer_2_15_we0_assign_proc : process(ap_CS_fsm_state25)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            patch_buffer_2_15_we0 <= ap_const_logic_1;
        else 
            patch_buffer_2_15_we0 <= ap_const_logic_0;
        end if; 
    end process;

    patch_buffer_2_1_address0 <= idxprom4_reg_2269(2 - 1 downto 0);

    patch_buffer_2_1_ce0_assign_proc : process(ap_CS_fsm_state18)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            patch_buffer_2_1_ce0 <= ap_const_logic_1;
        else 
            patch_buffer_2_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    patch_buffer_2_1_d0 <= new_patch_q0;

    patch_buffer_2_1_we0_assign_proc : process(ap_CS_fsm_state18)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            patch_buffer_2_1_we0 <= ap_const_logic_1;
        else 
            patch_buffer_2_1_we0 <= ap_const_logic_0;
        end if; 
    end process;

    patch_buffer_2_2_address0 <= idxprom4_reg_2269(2 - 1 downto 0);

    patch_buffer_2_2_ce0_assign_proc : process(ap_CS_fsm_state19)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            patch_buffer_2_2_ce0 <= ap_const_logic_1;
        else 
            patch_buffer_2_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    patch_buffer_2_2_d0 <= new_patch_q1;

    patch_buffer_2_2_we0_assign_proc : process(ap_CS_fsm_state19)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            patch_buffer_2_2_we0 <= ap_const_logic_1;
        else 
            patch_buffer_2_2_we0 <= ap_const_logic_0;
        end if; 
    end process;

    patch_buffer_2_3_address0 <= idxprom4_reg_2269(2 - 1 downto 0);

    patch_buffer_2_3_ce0_assign_proc : process(ap_CS_fsm_state19)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            patch_buffer_2_3_ce0 <= ap_const_logic_1;
        else 
            patch_buffer_2_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    patch_buffer_2_3_d0 <= new_patch_q0;

    patch_buffer_2_3_we0_assign_proc : process(ap_CS_fsm_state19)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            patch_buffer_2_3_we0 <= ap_const_logic_1;
        else 
            patch_buffer_2_3_we0 <= ap_const_logic_0;
        end if; 
    end process;

    patch_buffer_2_4_address0 <= idxprom4_reg_2269(2 - 1 downto 0);

    patch_buffer_2_4_ce0_assign_proc : process(ap_CS_fsm_state20)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            patch_buffer_2_4_ce0 <= ap_const_logic_1;
        else 
            patch_buffer_2_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    patch_buffer_2_4_d0 <= new_patch_q1;

    patch_buffer_2_4_we0_assign_proc : process(ap_CS_fsm_state20)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            patch_buffer_2_4_we0 <= ap_const_logic_1;
        else 
            patch_buffer_2_4_we0 <= ap_const_logic_0;
        end if; 
    end process;

    patch_buffer_2_5_address0 <= idxprom4_reg_2269(2 - 1 downto 0);

    patch_buffer_2_5_ce0_assign_proc : process(ap_CS_fsm_state20)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            patch_buffer_2_5_ce0 <= ap_const_logic_1;
        else 
            patch_buffer_2_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    patch_buffer_2_5_d0 <= new_patch_q0;

    patch_buffer_2_5_we0_assign_proc : process(ap_CS_fsm_state20)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            patch_buffer_2_5_we0 <= ap_const_logic_1;
        else 
            patch_buffer_2_5_we0 <= ap_const_logic_0;
        end if; 
    end process;

    patch_buffer_2_6_address0 <= idxprom4_reg_2269(2 - 1 downto 0);

    patch_buffer_2_6_ce0_assign_proc : process(ap_CS_fsm_state21)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            patch_buffer_2_6_ce0 <= ap_const_logic_1;
        else 
            patch_buffer_2_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    patch_buffer_2_6_d0 <= new_patch_q1;

    patch_buffer_2_6_we0_assign_proc : process(ap_CS_fsm_state21)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            patch_buffer_2_6_we0 <= ap_const_logic_1;
        else 
            patch_buffer_2_6_we0 <= ap_const_logic_0;
        end if; 
    end process;

    patch_buffer_2_7_address0 <= idxprom4_reg_2269(2 - 1 downto 0);

    patch_buffer_2_7_ce0_assign_proc : process(ap_CS_fsm_state21)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            patch_buffer_2_7_ce0 <= ap_const_logic_1;
        else 
            patch_buffer_2_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    patch_buffer_2_7_d0 <= new_patch_q0;

    patch_buffer_2_7_we0_assign_proc : process(ap_CS_fsm_state21)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            patch_buffer_2_7_we0 <= ap_const_logic_1;
        else 
            patch_buffer_2_7_we0 <= ap_const_logic_0;
        end if; 
    end process;

    patch_buffer_2_8_address0 <= idxprom4_reg_2269(2 - 1 downto 0);

    patch_buffer_2_8_ce0_assign_proc : process(ap_CS_fsm_state22)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            patch_buffer_2_8_ce0 <= ap_const_logic_1;
        else 
            patch_buffer_2_8_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    patch_buffer_2_8_d0 <= new_patch_q1;

    patch_buffer_2_8_we0_assign_proc : process(ap_CS_fsm_state22)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            patch_buffer_2_8_we0 <= ap_const_logic_1;
        else 
            patch_buffer_2_8_we0 <= ap_const_logic_0;
        end if; 
    end process;

    patch_buffer_2_9_address0 <= idxprom4_reg_2269(2 - 1 downto 0);

    patch_buffer_2_9_ce0_assign_proc : process(ap_CS_fsm_state22)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            patch_buffer_2_9_ce0 <= ap_const_logic_1;
        else 
            patch_buffer_2_9_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    patch_buffer_2_9_d0 <= new_patch_q0;

    patch_buffer_2_9_we0_assign_proc : process(ap_CS_fsm_state22)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            patch_buffer_2_9_we0 <= ap_const_logic_1;
        else 
            patch_buffer_2_9_we0 <= ap_const_logic_0;
        end if; 
    end process;

    patch_buffer_3_0_address0 <= idxprom4_reg_2269(2 - 1 downto 0);

    patch_buffer_3_0_ce0_assign_proc : process(ap_CS_fsm_state26)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            patch_buffer_3_0_ce0 <= ap_const_logic_1;
        else 
            patch_buffer_3_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    patch_buffer_3_0_d0 <= new_patch_q1;

    patch_buffer_3_0_we0_assign_proc : process(ap_CS_fsm_state26)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            patch_buffer_3_0_we0 <= ap_const_logic_1;
        else 
            patch_buffer_3_0_we0 <= ap_const_logic_0;
        end if; 
    end process;

    patch_buffer_3_10_address0 <= idxprom4_reg_2269(2 - 1 downto 0);

    patch_buffer_3_10_ce0_assign_proc : process(ap_CS_fsm_state31)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
            patch_buffer_3_10_ce0 <= ap_const_logic_1;
        else 
            patch_buffer_3_10_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    patch_buffer_3_10_d0 <= new_patch_q1;

    patch_buffer_3_10_we0_assign_proc : process(ap_CS_fsm_state31)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
            patch_buffer_3_10_we0 <= ap_const_logic_1;
        else 
            patch_buffer_3_10_we0 <= ap_const_logic_0;
        end if; 
    end process;

    patch_buffer_3_11_address0 <= idxprom4_reg_2269(2 - 1 downto 0);

    patch_buffer_3_11_ce0_assign_proc : process(ap_CS_fsm_state31)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
            patch_buffer_3_11_ce0 <= ap_const_logic_1;
        else 
            patch_buffer_3_11_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    patch_buffer_3_11_d0 <= new_patch_q0;

    patch_buffer_3_11_we0_assign_proc : process(ap_CS_fsm_state31)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
            patch_buffer_3_11_we0 <= ap_const_logic_1;
        else 
            patch_buffer_3_11_we0 <= ap_const_logic_0;
        end if; 
    end process;

    patch_buffer_3_12_address0 <= idxprom4_reg_2269(2 - 1 downto 0);

    patch_buffer_3_12_ce0_assign_proc : process(ap_CS_fsm_state32)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            patch_buffer_3_12_ce0 <= ap_const_logic_1;
        else 
            patch_buffer_3_12_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    patch_buffer_3_12_d0 <= new_patch_q1;

    patch_buffer_3_12_we0_assign_proc : process(ap_CS_fsm_state32)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            patch_buffer_3_12_we0 <= ap_const_logic_1;
        else 
            patch_buffer_3_12_we0 <= ap_const_logic_0;
        end if; 
    end process;

    patch_buffer_3_13_address0 <= idxprom4_reg_2269(2 - 1 downto 0);

    patch_buffer_3_13_ce0_assign_proc : process(ap_CS_fsm_state32)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            patch_buffer_3_13_ce0 <= ap_const_logic_1;
        else 
            patch_buffer_3_13_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    patch_buffer_3_13_d0 <= new_patch_q0;

    patch_buffer_3_13_we0_assign_proc : process(ap_CS_fsm_state32)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            patch_buffer_3_13_we0 <= ap_const_logic_1;
        else 
            patch_buffer_3_13_we0 <= ap_const_logic_0;
        end if; 
    end process;

    patch_buffer_3_14_address0 <= idxprom4_reg_2269(2 - 1 downto 0);

    patch_buffer_3_14_ce0_assign_proc : process(ap_CS_fsm_state33)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
            patch_buffer_3_14_ce0 <= ap_const_logic_1;
        else 
            patch_buffer_3_14_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    patch_buffer_3_14_d0 <= new_patch_q1;

    patch_buffer_3_14_we0_assign_proc : process(ap_CS_fsm_state33)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
            patch_buffer_3_14_we0 <= ap_const_logic_1;
        else 
            patch_buffer_3_14_we0 <= ap_const_logic_0;
        end if; 
    end process;

    patch_buffer_3_15_address0 <= idxprom4_reg_2269(2 - 1 downto 0);

    patch_buffer_3_15_ce0_assign_proc : process(ap_CS_fsm_state33)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
            patch_buffer_3_15_ce0 <= ap_const_logic_1;
        else 
            patch_buffer_3_15_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    patch_buffer_3_15_d0 <= new_patch_q0;

    patch_buffer_3_15_we0_assign_proc : process(ap_CS_fsm_state33)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
            patch_buffer_3_15_we0 <= ap_const_logic_1;
        else 
            patch_buffer_3_15_we0 <= ap_const_logic_0;
        end if; 
    end process;

    patch_buffer_3_1_address0 <= idxprom4_reg_2269(2 - 1 downto 0);

    patch_buffer_3_1_ce0_assign_proc : process(ap_CS_fsm_state26)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            patch_buffer_3_1_ce0 <= ap_const_logic_1;
        else 
            patch_buffer_3_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    patch_buffer_3_1_d0 <= new_patch_q0;

    patch_buffer_3_1_we0_assign_proc : process(ap_CS_fsm_state26)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            patch_buffer_3_1_we0 <= ap_const_logic_1;
        else 
            patch_buffer_3_1_we0 <= ap_const_logic_0;
        end if; 
    end process;

    patch_buffer_3_2_address0 <= idxprom4_reg_2269(2 - 1 downto 0);

    patch_buffer_3_2_ce0_assign_proc : process(ap_CS_fsm_state27)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            patch_buffer_3_2_ce0 <= ap_const_logic_1;
        else 
            patch_buffer_3_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    patch_buffer_3_2_d0 <= new_patch_q1;

    patch_buffer_3_2_we0_assign_proc : process(ap_CS_fsm_state27)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            patch_buffer_3_2_we0 <= ap_const_logic_1;
        else 
            patch_buffer_3_2_we0 <= ap_const_logic_0;
        end if; 
    end process;

    patch_buffer_3_3_address0 <= idxprom4_reg_2269(2 - 1 downto 0);

    patch_buffer_3_3_ce0_assign_proc : process(ap_CS_fsm_state27)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            patch_buffer_3_3_ce0 <= ap_const_logic_1;
        else 
            patch_buffer_3_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    patch_buffer_3_3_d0 <= new_patch_q0;

    patch_buffer_3_3_we0_assign_proc : process(ap_CS_fsm_state27)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            patch_buffer_3_3_we0 <= ap_const_logic_1;
        else 
            patch_buffer_3_3_we0 <= ap_const_logic_0;
        end if; 
    end process;

    patch_buffer_3_4_address0 <= idxprom4_reg_2269(2 - 1 downto 0);

    patch_buffer_3_4_ce0_assign_proc : process(ap_CS_fsm_state28)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            patch_buffer_3_4_ce0 <= ap_const_logic_1;
        else 
            patch_buffer_3_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    patch_buffer_3_4_d0 <= new_patch_q1;

    patch_buffer_3_4_we0_assign_proc : process(ap_CS_fsm_state28)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            patch_buffer_3_4_we0 <= ap_const_logic_1;
        else 
            patch_buffer_3_4_we0 <= ap_const_logic_0;
        end if; 
    end process;

    patch_buffer_3_5_address0 <= idxprom4_reg_2269(2 - 1 downto 0);

    patch_buffer_3_5_ce0_assign_proc : process(ap_CS_fsm_state28)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            patch_buffer_3_5_ce0 <= ap_const_logic_1;
        else 
            patch_buffer_3_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    patch_buffer_3_5_d0 <= new_patch_q0;

    patch_buffer_3_5_we0_assign_proc : process(ap_CS_fsm_state28)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            patch_buffer_3_5_we0 <= ap_const_logic_1;
        else 
            patch_buffer_3_5_we0 <= ap_const_logic_0;
        end if; 
    end process;

    patch_buffer_3_6_address0 <= idxprom4_reg_2269(2 - 1 downto 0);

    patch_buffer_3_6_ce0_assign_proc : process(ap_CS_fsm_state29)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            patch_buffer_3_6_ce0 <= ap_const_logic_1;
        else 
            patch_buffer_3_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    patch_buffer_3_6_d0 <= new_patch_q1;

    patch_buffer_3_6_we0_assign_proc : process(ap_CS_fsm_state29)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            patch_buffer_3_6_we0 <= ap_const_logic_1;
        else 
            patch_buffer_3_6_we0 <= ap_const_logic_0;
        end if; 
    end process;

    patch_buffer_3_7_address0 <= idxprom4_reg_2269(2 - 1 downto 0);

    patch_buffer_3_7_ce0_assign_proc : process(ap_CS_fsm_state29)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            patch_buffer_3_7_ce0 <= ap_const_logic_1;
        else 
            patch_buffer_3_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    patch_buffer_3_7_d0 <= new_patch_q0;

    patch_buffer_3_7_we0_assign_proc : process(ap_CS_fsm_state29)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            patch_buffer_3_7_we0 <= ap_const_logic_1;
        else 
            patch_buffer_3_7_we0 <= ap_const_logic_0;
        end if; 
    end process;

    patch_buffer_3_8_address0 <= idxprom4_reg_2269(2 - 1 downto 0);

    patch_buffer_3_8_ce0_assign_proc : process(ap_CS_fsm_state30)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            patch_buffer_3_8_ce0 <= ap_const_logic_1;
        else 
            patch_buffer_3_8_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    patch_buffer_3_8_d0 <= new_patch_q1;

    patch_buffer_3_8_we0_assign_proc : process(ap_CS_fsm_state30)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            patch_buffer_3_8_we0 <= ap_const_logic_1;
        else 
            patch_buffer_3_8_we0 <= ap_const_logic_0;
        end if; 
    end process;

    patch_buffer_3_9_address0 <= idxprom4_reg_2269(2 - 1 downto 0);

    patch_buffer_3_9_ce0_assign_proc : process(ap_CS_fsm_state30)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            patch_buffer_3_9_ce0 <= ap_const_logic_1;
        else 
            patch_buffer_3_9_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    patch_buffer_3_9_d0 <= new_patch_q0;

    patch_buffer_3_9_we0_assign_proc : process(ap_CS_fsm_state30)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            patch_buffer_3_9_we0 <= ap_const_logic_1;
        else 
            patch_buffer_3_9_we0 <= ap_const_logic_0;
        end if; 
    end process;

    patch_buffer_4_0_address0 <= idxprom4_reg_2269(2 - 1 downto 0);

    patch_buffer_4_0_ce0_assign_proc : process(ap_CS_fsm_state34)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
            patch_buffer_4_0_ce0 <= ap_const_logic_1;
        else 
            patch_buffer_4_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    patch_buffer_4_0_d0 <= new_patch_q1;

    patch_buffer_4_0_we0_assign_proc : process(ap_CS_fsm_state34)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
            patch_buffer_4_0_we0 <= ap_const_logic_1;
        else 
            patch_buffer_4_0_we0 <= ap_const_logic_0;
        end if; 
    end process;

    patch_buffer_4_10_address0 <= idxprom4_reg_2269(2 - 1 downto 0);

    patch_buffer_4_10_ce0_assign_proc : process(ap_CS_fsm_state39)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state39)) then 
            patch_buffer_4_10_ce0 <= ap_const_logic_1;
        else 
            patch_buffer_4_10_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    patch_buffer_4_10_d0 <= new_patch_q1;

    patch_buffer_4_10_we0_assign_proc : process(ap_CS_fsm_state39)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state39)) then 
            patch_buffer_4_10_we0 <= ap_const_logic_1;
        else 
            patch_buffer_4_10_we0 <= ap_const_logic_0;
        end if; 
    end process;

    patch_buffer_4_11_address0 <= idxprom4_reg_2269(2 - 1 downto 0);

    patch_buffer_4_11_ce0_assign_proc : process(ap_CS_fsm_state39)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state39)) then 
            patch_buffer_4_11_ce0 <= ap_const_logic_1;
        else 
            patch_buffer_4_11_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    patch_buffer_4_11_d0 <= new_patch_q0;

    patch_buffer_4_11_we0_assign_proc : process(ap_CS_fsm_state39)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state39)) then 
            patch_buffer_4_11_we0 <= ap_const_logic_1;
        else 
            patch_buffer_4_11_we0 <= ap_const_logic_0;
        end if; 
    end process;

    patch_buffer_4_12_address0 <= idxprom4_reg_2269(2 - 1 downto 0);

    patch_buffer_4_12_ce0_assign_proc : process(ap_CS_fsm_state40)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state40)) then 
            patch_buffer_4_12_ce0 <= ap_const_logic_1;
        else 
            patch_buffer_4_12_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    patch_buffer_4_12_d0 <= new_patch_q1;

    patch_buffer_4_12_we0_assign_proc : process(ap_CS_fsm_state40)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state40)) then 
            patch_buffer_4_12_we0 <= ap_const_logic_1;
        else 
            patch_buffer_4_12_we0 <= ap_const_logic_0;
        end if; 
    end process;

    patch_buffer_4_13_address0 <= idxprom4_reg_2269(2 - 1 downto 0);

    patch_buffer_4_13_ce0_assign_proc : process(ap_CS_fsm_state40)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state40)) then 
            patch_buffer_4_13_ce0 <= ap_const_logic_1;
        else 
            patch_buffer_4_13_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    patch_buffer_4_13_d0 <= new_patch_q0;

    patch_buffer_4_13_we0_assign_proc : process(ap_CS_fsm_state40)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state40)) then 
            patch_buffer_4_13_we0 <= ap_const_logic_1;
        else 
            patch_buffer_4_13_we0 <= ap_const_logic_0;
        end if; 
    end process;

    patch_buffer_4_14_address0 <= idxprom4_reg_2269(2 - 1 downto 0);

    patch_buffer_4_14_ce0_assign_proc : process(ap_CS_fsm_state41)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state41)) then 
            patch_buffer_4_14_ce0 <= ap_const_logic_1;
        else 
            patch_buffer_4_14_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    patch_buffer_4_14_d0 <= new_patch_q1;

    patch_buffer_4_14_we0_assign_proc : process(ap_CS_fsm_state41)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state41)) then 
            patch_buffer_4_14_we0 <= ap_const_logic_1;
        else 
            patch_buffer_4_14_we0 <= ap_const_logic_0;
        end if; 
    end process;

    patch_buffer_4_15_address0 <= idxprom4_reg_2269(2 - 1 downto 0);

    patch_buffer_4_15_ce0_assign_proc : process(ap_CS_fsm_state41)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state41)) then 
            patch_buffer_4_15_ce0 <= ap_const_logic_1;
        else 
            patch_buffer_4_15_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    patch_buffer_4_15_d0 <= new_patch_q0;

    patch_buffer_4_15_we0_assign_proc : process(ap_CS_fsm_state41)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state41)) then 
            patch_buffer_4_15_we0 <= ap_const_logic_1;
        else 
            patch_buffer_4_15_we0 <= ap_const_logic_0;
        end if; 
    end process;

    patch_buffer_4_1_address0 <= idxprom4_reg_2269(2 - 1 downto 0);

    patch_buffer_4_1_ce0_assign_proc : process(ap_CS_fsm_state34)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
            patch_buffer_4_1_ce0 <= ap_const_logic_1;
        else 
            patch_buffer_4_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    patch_buffer_4_1_d0 <= new_patch_q0;

    patch_buffer_4_1_we0_assign_proc : process(ap_CS_fsm_state34)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
            patch_buffer_4_1_we0 <= ap_const_logic_1;
        else 
            patch_buffer_4_1_we0 <= ap_const_logic_0;
        end if; 
    end process;

    patch_buffer_4_2_address0 <= idxprom4_reg_2269(2 - 1 downto 0);

    patch_buffer_4_2_ce0_assign_proc : process(ap_CS_fsm_state35)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
            patch_buffer_4_2_ce0 <= ap_const_logic_1;
        else 
            patch_buffer_4_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    patch_buffer_4_2_d0 <= new_patch_q1;

    patch_buffer_4_2_we0_assign_proc : process(ap_CS_fsm_state35)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
            patch_buffer_4_2_we0 <= ap_const_logic_1;
        else 
            patch_buffer_4_2_we0 <= ap_const_logic_0;
        end if; 
    end process;

    patch_buffer_4_3_address0 <= idxprom4_reg_2269(2 - 1 downto 0);

    patch_buffer_4_3_ce0_assign_proc : process(ap_CS_fsm_state35)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
            patch_buffer_4_3_ce0 <= ap_const_logic_1;
        else 
            patch_buffer_4_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    patch_buffer_4_3_d0 <= new_patch_q0;

    patch_buffer_4_3_we0_assign_proc : process(ap_CS_fsm_state35)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
            patch_buffer_4_3_we0 <= ap_const_logic_1;
        else 
            patch_buffer_4_3_we0 <= ap_const_logic_0;
        end if; 
    end process;

    patch_buffer_4_4_address0 <= idxprom4_reg_2269(2 - 1 downto 0);

    patch_buffer_4_4_ce0_assign_proc : process(ap_CS_fsm_state36)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
            patch_buffer_4_4_ce0 <= ap_const_logic_1;
        else 
            patch_buffer_4_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    patch_buffer_4_4_d0 <= new_patch_q1;

    patch_buffer_4_4_we0_assign_proc : process(ap_CS_fsm_state36)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
            patch_buffer_4_4_we0 <= ap_const_logic_1;
        else 
            patch_buffer_4_4_we0 <= ap_const_logic_0;
        end if; 
    end process;

    patch_buffer_4_5_address0 <= idxprom4_reg_2269(2 - 1 downto 0);

    patch_buffer_4_5_ce0_assign_proc : process(ap_CS_fsm_state36)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
            patch_buffer_4_5_ce0 <= ap_const_logic_1;
        else 
            patch_buffer_4_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    patch_buffer_4_5_d0 <= new_patch_q0;

    patch_buffer_4_5_we0_assign_proc : process(ap_CS_fsm_state36)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
            patch_buffer_4_5_we0 <= ap_const_logic_1;
        else 
            patch_buffer_4_5_we0 <= ap_const_logic_0;
        end if; 
    end process;

    patch_buffer_4_6_address0 <= idxprom4_reg_2269(2 - 1 downto 0);

    patch_buffer_4_6_ce0_assign_proc : process(ap_CS_fsm_state37)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            patch_buffer_4_6_ce0 <= ap_const_logic_1;
        else 
            patch_buffer_4_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    patch_buffer_4_6_d0 <= new_patch_q1;

    patch_buffer_4_6_we0_assign_proc : process(ap_CS_fsm_state37)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            patch_buffer_4_6_we0 <= ap_const_logic_1;
        else 
            patch_buffer_4_6_we0 <= ap_const_logic_0;
        end if; 
    end process;

    patch_buffer_4_7_address0 <= idxprom4_reg_2269(2 - 1 downto 0);

    patch_buffer_4_7_ce0_assign_proc : process(ap_CS_fsm_state37)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            patch_buffer_4_7_ce0 <= ap_const_logic_1;
        else 
            patch_buffer_4_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    patch_buffer_4_7_d0 <= new_patch_q0;

    patch_buffer_4_7_we0_assign_proc : process(ap_CS_fsm_state37)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            patch_buffer_4_7_we0 <= ap_const_logic_1;
        else 
            patch_buffer_4_7_we0 <= ap_const_logic_0;
        end if; 
    end process;

    patch_buffer_4_8_address0 <= idxprom4_reg_2269(2 - 1 downto 0);

    patch_buffer_4_8_ce0_assign_proc : process(ap_CS_fsm_state38)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state38)) then 
            patch_buffer_4_8_ce0 <= ap_const_logic_1;
        else 
            patch_buffer_4_8_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    patch_buffer_4_8_d0 <= new_patch_q1;

    patch_buffer_4_8_we0_assign_proc : process(ap_CS_fsm_state38)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state38)) then 
            patch_buffer_4_8_we0 <= ap_const_logic_1;
        else 
            patch_buffer_4_8_we0 <= ap_const_logic_0;
        end if; 
    end process;

    patch_buffer_4_9_address0 <= idxprom4_reg_2269(2 - 1 downto 0);

    patch_buffer_4_9_ce0_assign_proc : process(ap_CS_fsm_state38)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state38)) then 
            patch_buffer_4_9_ce0 <= ap_const_logic_1;
        else 
            patch_buffer_4_9_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    patch_buffer_4_9_d0 <= new_patch_q0;

    patch_buffer_4_9_we0_assign_proc : process(ap_CS_fsm_state38)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state38)) then 
            patch_buffer_4_9_we0 <= ap_const_logic_1;
        else 
            patch_buffer_4_9_we0 <= ap_const_logic_0;
        end if; 
    end process;

    select_ln15_fu_2229_p3 <= 
        trunc_ln15_fu_2213_p1 when (icmp_ln15_fu_2217_p2(0) = '1') else 
        xor_ln15_fu_2223_p2;
    trunc_ln15_fu_2213_p1 <= add_ln15_fu_2207_p2(2 - 1 downto 0);
    xor_ln15_fu_2223_p2 <= (latest_patch_index_constprop_i xor ap_const_lv2_2);
    zext_ln15_fu_2203_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(latest_patch_index_constprop_i),3));
end behav;
